---index.html---
<div class="grin-container">
  <div class="content-area">
    <div id="loadingIndicator" class="loading-indicator">
      <div class="grin-spinner">üòä</div>
      <p>Loading your grin...</p>
    </div>
    <div id="contentDisplay" class="content-display"></div>
  </div>
  
  <div class="controls-panel">
    <button id="nextGrinBtn" class="control-btn primary">
      <span>üé≤</span> Next Grin
    </button>
    <button id="favoriteBtn" class="control-btn favorite">
      <span class="heart-icon">‚ô°</span> Favorite
    </button>
    <button id="shareBtn" class="control-btn">
      <span>üìã</span> Share
    </button>
    <button id="viewFavoritesBtn" class="control-btn">
      <span>‚≠ê</span> View Favorites
    </button>
  </div>

  <div class="add-content-section">
    <div class="input-group">
      <input type="url" id="userGrinInput" placeholder="Add your funny GIF/video URL..." />
      <button id="addGrinBtn" class="control-btn secondary">Add Grin</button>
    </div>
    <button id="clearUserGrinsBtn" class="control-btn danger small">Clear My Grins</button>
  </div>

  <div id="favoritesModal" class="modal">
    <div class="modal-overlay"></div>
    <div class="modal-content">
      <div class="modal-header">
        <h2>Your Favorite Grins</h2>
        <button id="closeFavoritesBtn" class="close-btn">√ó</button>
      </div>
      <div id="favoritesGrid" class="favorites-grid"></div>
    </div>
  </div>

  <div id="shareToast" class="toast">Copied to clipboard! üìã</div>
  <div id="addToast" class="toast">Grin added! üéâ</div>
  <div id="errorToast" class="toast error">Please enter a valid URL üòÖ</div>
</div>

---style.css---
.grin-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  text-align: center;
}

.content-area {
  position: relative;
  min-height: 400px;
  margin-bottom: 30px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  border-radius: 20px;
  padding: 20px;
  box-shadow: 0 10px 30px rgba(0,0,0,0.2);
  transition: all 0.8s ease;
}

.loading-indicator {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: white;
  font-size: 18px;
  opacity: 0;
  transition: opacity 0.3s ease;
}

.loading-indicator.show {
  opacity: 1;
}

.grin-spinner {
  font-size: 48px;
  animation: spin 2s linear infinite;
  margin-bottom: 10px;
}

@keyframes spin {
  0% { transform: rotate(0deg) scale(1); }
  50% { transform: rotate(180deg) scale(1.2); }
  100% { transform: rotate(360deg) scale(1); }
}

.content-display {
  min-height: 360px;
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

.content-display img,
.content-display video {
  max-width: 100%;
  max-height: 360px;
  border-radius: 15px;
  box-shadow: 0 8px 25px rgba(0,0,0,0.3);
  object-fit: contain;
  opacity: 0;
  transform: scale(0.8);
  transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
}

.content-display img.loaded,
.content-display video.loaded {
  opacity: 1;
  transform: scale(1);
}

.error-message {
  color: white;
  font-size: 24px;
  background: rgba(255,255,255,0.1);
  padding: 40px;
  border-radius: 15px;
  backdrop-filter: blur(10px);
}

.controls-panel {
  display: flex;
  gap: 15px;
  justify-content: center;
  flex-wrap: wrap;
  margin-bottom: 30px;
}

.control-btn {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border: none;
  padding: 12px 24px;
  border-radius: 25px;
  font-size: 16px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
  display: flex;
  align-items: center;
  gap: 8px;
}

.control-btn:hover {
  transform: translateY(-2px) scale(1.05);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.6);
}

.control-btn:active {
  transform: translateY(0) scale(0.98);
}

.control-btn.primary {
  background: linear-gradient(135deg, #ff6b6b 0%, #ee5a24 100%);
  box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
}

.control-btn.primary:hover {
  box-shadow: 0 8px 25px rgba(255, 107, 107, 0.6);
}

.control-btn.secondary {
  background: linear-gradient(135deg, #10ac84 0%, #00d2d3 100%);
  box-shadow: 0 4px 15px rgba(16, 172, 132, 0.4);
}

.control-btn.secondary:hover {
  box-shadow: 0 8px 25px rgba(16, 172, 132, 0.6);
}

.control-btn.danger {
  background: linear-gradient(135deg, #ff3838 0%, #ff4757 100%);
  box-shadow: 0 4px 15px rgba(255, 56, 56, 0.4);
}

.control-btn.danger:hover {
  box-shadow: 0 8px 25px rgba(255, 56, 56, 0.6);
}

.control-btn.small {
  padding: 8px 16px;
  font-size: 14px;
}

.control-btn.favorite.favorited .heart-icon {
  color: #ff6b6b;
  animation: heartPulse 0.6s ease;
}

@keyframes heartPulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.3); }
  100% { transform: scale(1); }
}

.heart-icon {
  font-size: 18px;
  transition: all 0.3s ease;
}

.add-content-section {
  background: rgba(255,255,255,0.1);
  padding: 25px;
  border-radius: 15px;
  backdrop-filter: blur(10px);
  margin-bottom: 20px;
}

.input-group {
  display: flex;
  gap: 10px;
  margin-bottom: 15px;
  flex-wrap: wrap;
  justify-content: center;
}

.input-group input {
  flex: 1;
  min-width: 250px;
  padding: 12px 20px;
  border: 2px solid transparent;
  border-radius: 25px;
  font-size: 16px;
  background: white;
  transition: all 0.3s ease;
}

.input-group input:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 20px rgba(102, 126, 234, 0.3);
}

.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1000;
}

.modal.show {
  display: block;
  animation: modalFadeIn 0.3s ease;
}

@keyframes modalFadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.modal-overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0,0,0,0.8);
  backdrop-filter: blur(5px);
}

.modal-content {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  border-radius: 20px;
  max-width: 90%;
  max-height: 80%;
  overflow: hidden;
  box-shadow: 0 20px 60px rgba(0,0,0,0.5);
}

.modal-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 20px 30px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.modal-header h2 {
  margin: 0;
  font-size: 24px;
}

.close-btn {
  background: none;
  border: none;
  color: white;
  font-size: 30px;
  cursor: pointer;
  padding: 0;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
}

.close-btn:hover {
  background: rgba(255,255,255,0.2);
  transform: scale(1.1);
}

.favorites-grid {
  padding: 30px;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 20px;
  max-height: 400px;
  overflow-y: auto;
}

.favorite-item {
  position: relative;
  border-radius: 10px;
  overflow: hidden;
  box-shadow: 0 4px 15px rgba(0,0,0,0.2);
  transition: all 0.3s ease;
  cursor: pointer;
}

.favorite-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 8px 25px rgba(0,0,0,0.3);
}

.favorite-item img,
.favorite-item video {
  width: 100%;
  height: 150px;
  object-fit: cover;
}

.favorite-item .remove-btn {
  position: absolute;
  top: 5px;
  right: 5px;
  background: rgba(255,255,255,0.9);
  border: none;
  border-radius: 50%;
  width: 30px;
  height: 30px;
  cursor: pointer;
  font-size: 16px;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 0;
  transition: all 0.3s ease;
}

.favorite-item:hover .remove-btn {
  opacity: 1;
}

.remove-btn:hover {
  background: #ff6b6b;
  color: white;
  transform: scale(1.1);
}

.toast {
  position: fixed;
  bottom: 30px;
  right: 30px;
  background: linear-gradient(135deg, #10ac84 0%, #00d2d3 100%);
  color: white;
  padding: 15px 25px;
  border-radius: 25px;
  box-shadow: 0 8px 25px rgba(0,0,0,0.3);
  transform: translateX(400px);
  transition: all 0.3s ease;
  font-weight: 600;
  z-index: 1001;
}

.toast.show {
  transform: translateX(0);
}

.toast.error {
  background: linear-gradient(135deg, #ff3838 0%, #ff4757 100%);
}

.empty-favorites {
  text-align: center;
  color: #666;
  font-size: 18px;
  padding: 60px 20px;
}

.empty-favorites span {
  font-size: 48px;
  display: block;
  margin-bottom: 15px;
}

/* Background gradients */
.bg-gradient-1 { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important; }
.bg-gradient-2 { background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%) !important; }
.bg-gradient-3 { background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%) !important; }
.bg-gradient-4 { background: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%) !important; }
.bg-gradient-5 { background: linear-gradient(135deg, #fa709a 0%, #fee140 100%) !important; }
.bg-gradient-6 { background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%) !important; }
.bg-gradient-7 { background: linear-gradient(135deg, #ffecd2 0%, #fcb69f 100%) !important; }
.bg-gradient-8 { background: linear-gradient(135deg, #ff8a80 0%, #ea4c89 100%) !important; }

@media (max-width: 768px) {
  .grin-container {
    padding: 15px;
  }
  
  .content-area {
    min-height: 300px;
  }
  
  .content-display img,
  .content-display video {
    max-height: 260px;
  }
  
  .controls-panel {
    gap: 10px;
  }
  
  .control-btn {
    padding: 10px 18px;
    font-size: 14px;
  }
  
  .input-group {
    flex-direction: column;
  }
  
  .input-group input {
    min-width: auto;
  }
  
  .modal-content {
    max-width: 95%;
  }
  
  .favorites-grid {
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    gap: 15px;
    padding: 20px;
  }
}

---script.js---
const curatedContent = [
  'https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif',
  'https://media.giphy.com/media/l3q2K5jinAlChoCLS/giphy.gif',
  'https://media.giphy.com/media/3o7buirYcmV5nSwIRW/giphy.gif',
  'https://media.giphy.com/media/mlvseq9yvZhba/giphy.gif',
  'https://media.giphy.com/media/ICOgUNjpvO0PC/giphy.gif',
  'https://media.giphy.com/media/8VrtCswiLDNnO/giphy.gif',
  'https://media.giphy.com/media/xT9IgG50Fb7Mi0prBC/giphy.gif',
  'https://media.giphy.com/media/14ut8PhnIwzros/giphy.gif',
  'https://media.giphy.com/media/3oriO0OEd9QIDdllqo/giphy.gif',
  'https://media.giphy.com/media/LmNwrBhejkK9EFP504/giphy.gif'
];

let currentContentUrl = '';
let backgroundIndex = 1;

// Utility functions
const getRandomItem = (array) => array[Math.floor(Math.random() * array.length)];

const isVideoUrl = (url) => {
  return /\.(mp4|webm|ogg|mov)$/i.test(url) || url.includes('video');
};

// LocalStorage functions
const getFavorites = () => {
  try {
    return JSON.parse(localStorage.getItem('instantGrinFavorites') || '[]');
  } catch {
    return [];
  }
};

const saveFavorites = (favorites) => {
  localStorage.setItem('instantGrinFavorites', JSON.stringify(favorites));
};

const getUserGrins = () => {
  try {
    return JSON.parse(localStorage.getItem('instantGrinUserContent') || '[]');
  } catch {
    return [];
  }
};

const saveUserGrins = (userGrins) => {
  localStorage.setItem('instantGrinUserContent', JSON.stringify(userGrins));
};

const isFavorited = (url) => getFavorites().includes(url);

const addFavorite = (url) => {
  const favorites = getFavorites();
  if (!favorites.includes(url)) {
    favorites.push(url);
    saveFavorites(favorites);
  }
};

const removeFavorite = (url) => {
  const favorites = getFavorites().filter(fav => fav !== url);
  saveFavorites(favorites);
};

// Toast notifications
const showToast = (toastId) => {
  const toast = document.getElementById(toastId);
  if (toast) {
    toast.classList.add('show');
    setTimeout(() => toast.classList.remove('show'), 3000);
  }
};

// Background gradient rotation
const rotateBackground = () => {
  const contentArea = document.querySelector('.content-area');
  if (contentArea) {
    contentArea.className = contentArea.className.replace(/bg-gradient-\d+/, '');
    contentArea.classList.add(`bg-gradient-${backgroundIndex}`);
    backgroundIndex = (backgroundIndex % 8) + 1;
  }
};

// Content display functions
const showLoading = () => {
  const loadingIndicator = document.getElementById('loadingIndicator');
  if (loadingIndicator) {
    loadingIndicator.classList.add('show');
  }
};

const hideLoading = () => {
  const loadingIndicator = document.getElementById('loadingIndicator');
  if (loadingIndicator) {
    loadingIndicator.classList.remove('show');
  }
};

const displayContent = (url, element) => {
  const contentDisplay = document.getElementById('contentDisplay');
  if (!contentDisplay) return;

  // Clear previous content
  contentDisplay.innerHTML = '';
  
  // Add new element
  contentDisplay.appendChild(element);
  
  // Trigger animation after a brief delay
  setTimeout(() => {
    element.classList.add('loaded');
  }, 50);
  
  hideLoading();
  updateFavoriteButton();
  rotateBackground();
};

const displayError = () => {
  const contentDisplay = document.getElementById('contentDisplay');
  if (!contentDisplay) return;

  contentDisplay.innerHTML = `
    <div class="error-message">
      <div>üòÖ Oops! That grin broke!</div>
      <div style="font-size: 16px; margin-top: 10px;">Loading a new one...</div>
    </div>
  `;
  
  hideLoading();
  
  // Auto-load next content after 2 seconds
  setTimeout(displayRandomContent, 2000);
};

const displayRandomContent = () => {
  const allContent = [...curatedContent, ...getUserGrins()];
  if (allContent.length === 0) return;
  
  showLoading();
  currentContentUrl = getRandomItem(allContent);
  
  if (isVideoUrl(currentContentUrl)) {
    const video = document.createElement('video');
    video.src = currentContentUrl;
    video.autoplay = true;
    video.loop = true;
    video.muted = true;
    video.controls = true;
    
    video.onloadeddata = () => displayContent(currentContentUrl, video);
    video.onerror = displayError;
  } else {
    const img = document.createElement('img');
    img.src = currentContentUrl;
    
    img.onload = () => displayContent(currentContentUrl, img);
    img.onerror = displayError;
  }
};

// Favorite functionality
const updateFavoriteButton = () => {
  const favoriteBtn = document.getElementById('favoriteBtn');
  if (!favoriteBtn) return;

  const heartIcon = favoriteBtn.querySelector('.heart-icon');
  if (isFavorited(currentContentUrl)) {
    heartIcon.textContent = '‚ô•';
    favoriteBtn.classList.add('favorited');
  } else {
    heartIcon.textContent = '‚ô°';
    favoriteBtn.classList.remove('favorited');
  }
};

const toggleFavorite = () => {
  if (!currentContentUrl) return;

  if (isFavorited(currentContentUrl)) {
    removeFavorite(currentContentUrl);
  } else {
    addFavorite(currentContentUrl);
  }
  
  updateFavoriteButton();
};

// Favorites modal
const renderFavoritesGallery = () => {
  const favoritesGrid = document.getElementById('favoritesGrid');
  if (!favoritesGrid) return;

  const favorites = getFavorites();
  
  if (favorites.length === 0) {
    favoritesGrid.innerHTML = `
      <div class="empty-favorites">
        <span>üòî</span>
        <div>No favorites yet!</div>
        <div style="font-size: 14px; margin-top: 10px;">Click the heart on content you love</div>
      </div>
    `;
    return;
  }
  
  favoritesGrid.innerHTML = favorites.map(url => `
    <div class="favorite-item" data-url="${url}">
      ${isVideoUrl(url) 
        ? `<video src="${url}" muted></video>` 
        : `<img src="${url}" alt="Favorite grin">`
      }
      <button class="remove-btn" data-url="${url}">√ó</button>
    </div>
  `).join('');
  
  // Add event listeners
  favoritesGrid.querySelectorAll('.favorite-item').forEach(item => {
    item.addEventListener('click', (e) => {
      if (e.target.classList.contains('remove-btn')) return;
      
      const url = item.dataset.url;
      currentContentUrl = url;
      
      if (isVideoUrl(url)) {
        const video = document.createElement('video');
        video.src = url;
        video.autoplay = true;
        video.loop = true;
        video.muted = true;
        video.controls = true;
        video.classList.add('loaded');
        displayContent(url, video);
      } else {
        const img = document.createElement('img');
        img.src = url;
        img.classList.add('loaded');
        displayContent(url, img);
      }
      
      closeFavoritesModal();
    });
  });
  
  favoritesGrid.querySelectorAll('.remove-btn').forEach(btn => {
    btn.addEventListener('click', (e) => {
      e.stopPropagation();
      const url = btn.dataset.url;
      removeFavorite(url);
      renderFavoritesGallery();
      if (currentContentUrl === url) {
        updateFavoriteButton();
      }
    });
  });
};

const showFavoritesModal = () => {
  const modal = document.getElementById('favoritesModal');
  if (modal) {
    renderFavoritesGallery();
    modal.classList.add('show');
  }
};

const closeFavoritesModal = () => {
  const modal = document.getElementById('favoritesModal');
  if (modal) {
    modal.classList.remove('show');
  }
};

// Content sharing
const copyToClipboard = (text) => {
  if (navigator.clipboard && navigator.clipboard.writeText) {
    navigator.clipboard.writeText(text).then(() => {
      showToast('shareToast');
    }).catch(() => {
      // Fallback for older browsers
      const textArea = document.createElement('textarea');
      textArea.value = text;
      document.body.appendChild(textArea);
      textArea.select();
      document.execCommand('copy');
      document.body.removeChild(textArea);
      showToast('shareToast');
    });
  }
};

// User content management
const isValidUrl = (url) => {
  try {
    new URL(url);
    return /\.(gif|jpg|jpeg|png|webp|mp4|webm|ogg|mov)$/i.test(url) || 
           url.includes('giphy.com') || 
           url.includes('imgur.com');
  } catch {
    return false;
  }
};

const addUserGrin = () => {
  const input = document.getElementById('userGrinInput');
  if (!input) return;

  const url = input.value.trim();
  
  if (!url) {
    showToast('errorToast');
    return;
  }
  
  if (!isValidUrl(url)) {
    showToast('errorToast');
    return;
  }
  
  const userGrins = getUserGrins();
  if (!userGrins.includes(url)) {
    userGrins.push(url);
    saveUserGrins(userGrins);
    input.value = '';
    showToast('addToast');
  } else {
    showToast('errorToast');
  }
};

const clearUserGrins = () => {
  if (confirm('Are you sure you want to clear all your added grins?')) {
    saveUserGrins([]);
    showToast('addToast');
  }
};

// Initialize the app
const initApp = () => {
  // Initial content display
  displayRandomContent();
  
  // Event listeners
  const nextGrinBtn = document.getElementById('nextGrinBtn');
  if (nextGrinBtn) {
    nextGrinBtn.addEventListener('click', displayRandomContent);
  }
  
  const favoriteBtn = document.getElementById('favoriteBtn');
  if (favoriteBtn) {
    favoriteBtn.addEventListener('click', toggleFavorite);
  }
  
  const shareBtn = document.getElementById('shareBtn');
  if (shareBtn) {
    shareBtn.addEventListener('click', () => {
      if (currentContentUrl) {
        copyToClipboard(currentContentUrl);
      }
    });
  }
  
  const viewFavoritesBtn = document.getElementById('viewFavoritesBtn');
  if (viewFavoritesBtn) {
    viewFavoritesBtn.addEventListener('click', showFavoritesModal);
  }
  
  const closeFavoritesBtn = document.getElementById('closeFavoritesBtn');
  if (closeFavoritesBtn) {
    closeFavoritesBtn.addEventListener('click', closeFavoritesModal);
  }
  
  const addGrinBtn = document.getElementById('addGrinBtn');
  if (addGrinBtn) {
    addGrinBtn.addEventListener('click', addUserGrin);
  }
  
  const clearUserGrinsBtn = document.getElementById('clearUserGrinsBtn');
  if (clearUserGrinsBtn) {
    clearUserGrinsBtn.addEventListener('click', clearUserGrins);
  }
  
  const userGrinInput = document.getElementById('userGrinInput');
  if (userGrinInput) {
    userGrinInput.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        addUserGrin();
      }
    });
  }
  
  // Modal overlay click to close
  const modalOverlay = document.querySelector('.modal-overlay');
  if (modalOverlay) {
    modalOverlay.addEventListener('click', closeFavoritesModal);
  }
  
  // Keyboard shortcuts
  document.addEventListener('keydown', (e) => {
    if (e.key === ' ' || e.key === 'Enter') {
      e.preventDefault();
      displayRandomContent();
    } else if (e.key === 'f' || e.key === 'F') {
      toggleFavorite();
    } else if (e.key === 's' || e.key === 'S') {
      if (currentContentUrl) {
        copyToClipboard(currentContentUrl);
      }
    } else if (e.key === 'Escape') {
      closeFavoritesModal();
    }
  });
};