{
  "title": "CryoLemon Burst",
  "description": "An interactive static web application that simulates the volumetric expansion and eventual bursting of a lemon juice barrel as it freezes, controlled by a user-operated slider. Experience the physics of ice expansion in a visually engaging way.",
  "features": [
    "Interactive Freezing Slider: A highly responsive range input allows users to precisely control the 'freezing level' from 0% (liquid) to 100% (fully frozen).",
    "Visual Barrel Representation: A distinct, stylized barrel graphic (SVG or CSS-drawn) clearly displays the lemon juice, serving as the central interactive element.",
    "Dynamic Juice Transformation: The 'juice' inside the barrel progressively changes color (from vibrant yellow to icy blue/white) and develops a visible frost texture as it freezes.",
    "Volumetric Expansion & Strain: The barrel visually expands in width and height, and its surface displays subtle stress lines or cracks, simulating the physical strain from freezing liquid expansion.",
    "Burst Mechanic & Threshold: A carefully defined freezing level threshold (e.g., 90-95%) triggers a dramatic and irreversible 'burst' event.",
    "Dramatic Burst Visuals & Sound: An explosive animation featuring shattered barrel fragments, realistic splashing lemon-ice particles, and a loud, impactful 'explosion' sound effect upon rupture.",
    "Real-time Status & Feedback Display: A prominent text area shows the current 'Freezing Level' percentage and dynamic status messages (e.g., 'Stable', 'Expanding...', 'Critical!', 'BURSTED!').",
    "Simulation Reset Option: A clearly labeled 'Reset' button instantly restores the entire simulation, allowing users to experiment multiple times.",
    "Pre-Burst Warning Indicators: Visual cues, such as the barrel shaking, a pulsating red tint, and a 'Critical!' warning message, appear as the freezing level approaches the burst point.",
    "Ambient Freezing Audio Feedback: A subtle, growing 'cold' or 'ice' sound effect plays continuously, increasing in intensity and pitch as the freezing level rises.",
    "Interactive Instructions Overlay: A clean, concise modal overlay provides instructions on how to interact with the simulation, accessible via a dedicated button.",
    "Enhanced Accessibility & Control: The slider is fully keyboard navigable, and all interactive elements have clear focus states for a better user experience."
  ],
  "ui_polish": [
    "Smooth CSS Transitions & Easing: All visual changes (barrel expansion, juice color shift, frost opacity, background color transformation) utilize smooth CSS transitions with advanced cubic-bezier easing functions for a highly fluid and natural aesthetic.",
    "Advanced Particle System for Burst: Integrates a customizable particle library (like tsparticles) to create a highly realistic and dynamic ice shard and lemon juice splash explosion effect that emanates from the barrel's rupture point.",
    "Dynamic Thematic Background: The application's background subtly, but noticeably, shifts from a warm, summery yellow to a crisp, icy blue, visually reinforcing the barrel's current temperature state.",
    "Barrel Material Strain & Frost Shader: As the barrel expands and freezes, a sophisticated CSS-based shader or pseudo-element effect creates visible strain lines and a shimmering, accumulating frost layer on its surface.",
    "Impactful Explosion Screen Shake: A subtle, short-duration 'screen shake' effect is applied to the main container upon the barrel's burst, adding a visceral and impactful punch to the event.",
    "Custom Themed Slider Aesthetics: The slider is custom-styled with a 'cold' theme, featuring a unique, icy-blue thumb that provides visual feedback (e.g., a subtle glow) on hover and drag."
  ],
  "steps": [
    "1. Project Setup: Create `index.html`, `style.css`, and `script.js` files. Link `style.css` in the `<head>` and `script.js` with `defer` attribute at the end of the `<body>`.",
    "2. HTML Structure: In `index.html`, create a main container `div` (e.g., `id='app'`). Inside, include a title (`h1`), description (`p`), a `div` for the barrel (e.g., `id='barrel-container'`) containing an inner `div` for the 'juice' (`id='juice'`), a range slider input (`id='freeze-slider'`), a status display area (`id='status-display'`), a 'Reset' button (`id='reset-btn'`), and an 'Instructions' button (`id='instructions-btn'`). Also, add a `div` for the instructions modal (`id='instructions-modal'`).",
    "3. Base CSS Styling: Style `body` for full viewport, centering, and responsive fonts. Apply base styles for the main container, slider, and buttons. Set an initial warm yellow `background-color` for `#app` or `body`. Define `transition` properties for `background-color`, `transform`, and `opacity` on relevant elements.",
    "4. Barrel & Juice Visuals (CSS): Style `#barrel-container` to represent the barrel (e.g., using `border-radius`, `::before`/`::after` for top/bottom rims). Style `#juice` to fill the barrel with an initial yellow background. Implement `transform: scale()` for expansion. Define `transition: transform 0.3s ease-out;` on `#barrel-container`.",
    "5. JavaScript - DOM References & Initial State: Get references to all necessary DOM elements. Initialize JavaScript variables: `freezingLevel` (0), `burstThreshold` (92), `isBursted` (false), `audioAmbient`, `audioBurst` (using `new Audio()`), and a `particlesInstance` variable.",
    "6. Slider Event Listener: Attach an 'input' event listener to `#freeze-slider`. In the handler: update `freezingLevel` based on `event.target.value`. Call `updateVisuals()` and `checkBurstCondition()` functions. If `isBursted` is true, prevent further slider interaction.",
    "7. `updateVisuals()` Function (Core Logic): This function updates all visual and audio aspects based on `freezingLevel`.",
    "   a. Barrel Expansion: Calculate `scale` (e.g., `1 + freezingLevel * 0.003`). Apply `transform: scaleX() scaleY()` to `#barrel-container`.",
    "   b. Juice Color & Frost: Use `hsl()` interpolation to update `#juice` `background-color` from yellow to light blue/white. Create a pseudo-element on `#barrel-container` for frost (initially `opacity: 0`), and increase its `opacity` as `freezingLevel` rises.",
    "   c. Status Display: Update `#status-display` text with `freezingLevel` percentage and status ('Stable', 'Expanding...', 'Critical!').",
    "   d. Dynamic Background: Interpolate `background-color` of `#app` from warm yellow to icy blue based on `freezingLevel`. Ensure CSS `transition` is active on `#app`.",
    "   e. Ambient Sound: Adjust `audioAmbient.volume` and `audioAmbient.playbackRate` based on `freezingLevel`. Play `audioAmbient` if not already playing. Use `loop = true`.",
    "   f. Barrel Strain: Apply CSS filters (e.g., `brightness`, `contrast`) or subtle `box-shadow` changes to `#barrel-container` as `freezingLevel` increases to simulate material strain.",
    "8. `checkBurstCondition()` Function: If `freezingLevel` >= `burstThreshold` and `isBursted` is false:",
    "   a. Set `isBursted = true`. Disable `#freeze-slider` (`disabled = true`).",
    "   b. Call `triggerBurstEffect()`.",
    "   c. Update `#status-display` to 'BURSTED!' with a unique style (e.g., red, bold, larger font).",
    "9. `triggerBurstEffect()` Function: This handles the burst animation and sound.",
    "   a. Hide `#barrel-container` (`opacity: 0;`).",
    "   b. Play `audioBurst` once.",
    "   c. Initialize and trigger `tsparticles` explosion effects (ice shards, lemon splash) at the barrel's last position. Configure particle shapes, colors, velocities, and lifespans.",
    "   d. Apply a brief CSS 'screen shake' animation (using `keyframes` for `transform: translate()`) to the `#app` container.",
    "   e. Stop or mute `audioAmbient`.",
    "10. Reset Functionality: Add an event listener to `#reset-btn`. In the `resetSimulation()` handler:",
    "    a. Reset `freezingLevel` to 0, `isBursted` to false. Re-enable `#freeze-slider` (`disabled = false`), set its value to 0.",
    "    b. Call `updateVisuals()` to reset barrel scale, juice color, frost opacity, and background color.",
    "    c. If `particlesInstance` exists, destroy/clear particles. Reset `#barrel-container` `opacity` to 1. Remove 'critical' class and screen shake.",
    "    d. Reset `#status-display` text to initial 'Stable'. Reset `audioAmbient` volume and play it if it was stopped.",
    "11. Pre-Burst Warning Implementation: In `updateVisuals()`, if `freezingLevel` is between `burstThreshold - 15` and `burstThreshold`, add a CSS class (e.g., `critical-warning`) to `#barrel-container` that applies a subtle shaking `animation` and a red `box-shadow` glow. Remove the class otherwise.",
    "12. Sound Effects Loading: In `script.js`, instantiate `audioAmbient = new Audio('path/to/ambient_freeze.mp3');` and `audioBurst = new Audio('path/to/burst_explosion.mp3');`. Set `audioAmbient.loop = true`.",
    "13. `tsparticles` Integration: Include the `tsparticles` script (e.g., via CDN) in `index.html`. Add a `canvas` element (or a `div`) for particles. In `script.js`, use `tsParticles.load()` to initialize particle configuration for the burst. Store the returned promise or instance in `particlesInstance`. On burst, call methods on `particlesInstance` to emit/destroy particles.",
    "14. Instructional Overlay: Create HTML for `#instructions-modal` (initially `display: none;`) including a title, instructions, and a close button. Add event listeners to `#instructions-btn` to toggle modal visibility and to the close button to hide it. Implement an overlay background for the modal.",
    "15. Polish & Refinements: Fine-tune all CSS `transition` timings and `ease` functions. Adjust particle system parameters (density, size, speed, color) for maximum visual impact. Test rapid slider movements and consecutive bursts/resets. Ensure a clean visual state on reset. Use `vw`/`vh` units and `flexbox`/`grid` for layout to ensure basic responsiveness within a desktop browser window."
  ],
  "dependencies": [
    "tsparticles (for advanced particle effects, via CDN or local file)"
  ]
}