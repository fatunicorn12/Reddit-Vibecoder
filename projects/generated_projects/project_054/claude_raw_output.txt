---index.html---
<div id="app">
  <div class="main-container">
    <h1 class="title">CryoLemon Burst</h1>
    <p class="description">Experience the physics of ice expansion as a lemon juice barrel freezes and eventually bursts!</p>
    
    <div class="simulation-area">
      <div id="barrel-container" class="barrel">
        <div id="juice" class="juice"></div>
        <div class="barrel-rim top-rim"></div>
        <div class="barrel-rim bottom-rim"></div>
        <div class="frost-layer"></div>
        <div class="strain-lines"></div>
      </div>
    </div>
    
    <div class="controls">
      <div class="slider-container">
        <label for="freeze-slider">Freezing Level</label>
        <input type="range" id="freeze-slider" min="0" max="100" value="0" step="1" class="freeze-slider">
      </div>
      
      <div id="status-display" class="status-display">
        <div class="freezing-level">0%</div>
        <div class="status-text">Stable</div>
      </div>
    </div>
    
    <div class="buttons">
      <button id="reset-btn" class="reset-btn">Reset Simulation</button>
      <button id="instructions-btn" class="instructions-btn">Instructions</button>
    </div>
  </div>
  
  <div id="instructions-modal" class="modal">
    <div class="modal-content">
      <span class="close-btn">&times;</span>
      <h2>How to Use CryoLemon Burst</h2>
      <ul>
        <li>Use the slider to control the freezing level from 0% to 100%</li>
        <li>Watch the barrel expand and the juice change color as it freezes</li>
        <li>Notice the frost accumulation and strain lines appearing</li>
        <li>Listen to the ambient freezing sounds that intensify</li>
        <li>Be careful - at around 92% the barrel will burst dramatically!</li>
        <li>Use the Reset button to start over after a burst</li>
      </ul>
    </div>
  </div>
  
  <div id="particles-container"></div>
  
  <audio id="ambient-audio" loop>
    <source src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmYiCz2S2O+8diMFl2yl5Z1uKwYoirHq3JRGDw9Hn+Hy" type="audio/wav">
  </audio>
  
  <audio id="burst-audio">
    <source src="data:audio/wav;base64,UklGRnoGAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoGAACBhYqFbF1fdJivrJBhNjVgodDbq2EcBj+a2/LDciUFLIHO8tiJNwgZaLvt559NEAxQp+PwtmMcBjiR1/LMeSwFJHfH8N2QQAoUXrTp66hVFApGn+DyvmYiCz2S2O+8diMFl2yl5Z1uKwYoirHq3JRGDw9Hn+Hy" type="audio/wav">
  </audio>
</div>

---style.css---
.main-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  min-height: 100vh;
  padding: 2rem;
  background: linear-gradient(135deg, #FFD700, #FFA500);
  transition: background 0.8s cubic-bezier(0.4, 0.0, 0.2, 1);
  position: relative;
  overflow: hidden;
}

.title {
  font-size: 3rem;
  font-weight: bold;
  color: #2c3e50;
  margin-bottom: 0.5rem;
  text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
  animation: fadeIn 1s ease-out;
}

.description {
  font-size: 1.2rem;
  color: #34495e;
  text-align: center;
  margin-bottom: 2rem;
  max-width: 600px;
  animation: fadeIn 1s ease-out 0.2s both;
}

.simulation-area {
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 2rem 0;
  height: 400px;
  position: relative;
}

.barrel {
  width: 200px;
  height: 300px;
  background: linear-gradient(to right, #8B4513, #A0522D, #8B4513);
  border-radius: 20px 20px 30px 30px;
  position: relative;
  transform-origin: center center;
  transition: transform 0.3s cubic-bezier(0.4, 0.0, 0.2, 1),
              filter 0.3s cubic-bezier(0.4, 0.0, 0.2, 1),
              box-shadow 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
  box-shadow: 
    inset 0 0 20px rgba(0,0,0,0.2),
    0 10px 20px rgba(0,0,0,0.3);
  overflow: hidden;
}

.barrel::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: repeating-linear-gradient(
    90deg,
    transparent 0px,
    rgba(139, 69, 19, 0.3) 15px,
    transparent 30px
  );
  pointer-events: none;
}

.barrel-rim {
  position: absolute;
  left: -10px;
  right: -10px;
  height: 15px;
  background: linear-gradient(to bottom, #CD853F, #8B4513);
  border-radius: 50%;
  box-shadow: 0 2px 5px rgba(0,0,0,0.3);
}

.top-rim {
  top: -5px;
}

.bottom-rim {
  bottom: -5px;
}

.juice {
  position: absolute;
  bottom: 10px;
  left: 10px;
  right: 10px;
  top: 10px;
  background: linear-gradient(135deg, #FFD700, #FFA500);
  border-radius: 15px 15px 25px 25px;
  transition: background 0.5s cubic-bezier(0.4, 0.0, 0.2, 1);
  box-shadow: inset 0 0 20px rgba(255,255,255,0.2);
}

.frost-layer {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(circle at 30% 40%, 
    rgba(255,255,255,0.8) 0%,
    rgba(173,216,230,0.6) 30%,
    transparent 70%);
  opacity: 0;
  transition: opacity 0.5s cubic-bezier(0.4, 0.0, 0.2, 1);
  pointer-events: none;
  border-radius: 20px 20px 30px 30px;
}

.strain-lines {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-image: 
    linear-gradient(45deg, transparent 48%, rgba(255,0,0,0.3) 49%, rgba(255,0,0,0.3) 51%, transparent 52%),
    linear-gradient(-45deg, transparent 48%, rgba(255,0,0,0.3) 49%, rgba(255,0,0,0.3) 51%, transparent 52%);
  background-size: 40px 40px, 40px 40px;
  opacity: 0;
  transition: opacity 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
  pointer-events: none;
  border-radius: 20px 20px 30px 30px;
}

.controls {
  display: flex;
  gap: 3rem;
  align-items: center;
  margin: 2rem 0;
  flex-wrap: wrap;
  justify-content: center;
}

.slider-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 1rem;
}

.slider-container label {
  font-size: 1.2rem;
  font-weight: bold;
  color: #2c3e50;
}

.freeze-slider {
  width: 300px;
  height: 8px;
  background: linear-gradient(to right, #FFD700, #87CEEB);
  border-radius: 5px;
  outline: none;
  -webkit-appearance: none;
  transition: box-shadow 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
}

.freeze-slider:hover {
  box-shadow: 0 0 15px rgba(135, 206, 235, 0.5);
}

.freeze-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 25px;
  height: 25px;
  background: radial-gradient(circle, #87CEEB, #4682B4);
  border-radius: 50%;
  cursor: pointer;
  box-shadow: 0 0 10px rgba(70, 130, 180, 0.7);
  transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
}

.freeze-slider::-webkit-slider-thumb:hover {
  transform: scale(1.2);
  box-shadow: 0 0 20px rgba(70, 130, 180, 1);
}

.freeze-slider::-moz-range-thumb {
  width: 25px;
  height: 25px;
  background: radial-gradient(circle, #87CEEB, #4682B4);
  border-radius: 50%;
  cursor: pointer;
  border: none;
  box-shadow: 0 0 10px rgba(70, 130, 180, 0.7);
  transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
}

.freeze-slider::-moz-range-thumb:hover {
  transform: scale(1.2);
  box-shadow: 0 0 20px rgba(70, 130, 180, 1);
}

.status-display {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
  background: rgba(255,255,255,0.9);
  padding: 1.5rem;
  border-radius: 15px;
  box-shadow: 0 5px 15px rgba(0,0,0,0.1);
  min-width: 150px;
}

.freezing-level {
  font-size: 2rem;
  font-weight: bold;
  color: #2c3e50;
  transition: color 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
}

.status-text {
  font-size: 1.2rem;
  font-weight: bold;
  transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
}

.buttons {
  display: flex;
  gap: 1rem;
  margin-top: 2rem;
}

.reset-btn, .instructions-btn {
  padding: 1rem 2rem;
  font-size: 1.1rem;
  font-weight: bold;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  transition: all 0.3s cubic-bezier(0.4, 0.0, 0.2, 1);
  box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.reset-btn {
  background: linear-gradient(135deg, #e74c3c, #c0392b);
  color: white;
}

.reset-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 12px rgba(0,0,0,0.3);
}

.instructions-btn {
  background: linear-gradient(135deg, #3498db, #2980b9);
  color: white;
}

.instructions-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 12px rgba(0,0,0,0.3);
}

.modal {
  display: none;
  position: fixed;
  z-index: 1000;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.5);
  backdrop-filter: blur(5px);
}

.modal-content {
  background-color: white;
  margin: 10% auto;
  padding: 2rem;
  border-radius: 15px;
  width: 80%;
  max-width: 600px;
  position: relative;
  animation: slideIn 0.3s ease-out;
  box-shadow: 0 10px 30px rgba(0,0,0,0.3);
}

.close-btn {
  position: absolute;
  right: 1rem;
  top: 1rem;
  font-size: 2rem;
  cursor: pointer;
  color: #aaa;
  transition: color 0.3s;
}

.close-btn:hover {
  color: #000;
}

.modal-content h2 {
  color: #2c3e50;
  margin-bottom: 1rem;
}

.modal-content ul {
  color: #34495e;
  line-height: 1.6;
}

.modal-content li {
  margin-bottom: 0.5rem;
}

.critical-warning {
  animation: shake 0.5s infinite, criticalGlow 1s infinite alternate;
}

.bursted .status-text {
  color: #e74c3c !important;
  font-size: 1.5rem !important;
  animation: pulse 1s infinite;
}

.screen-shake {
  animation: screenShake 0.5s ease-in-out;
}

#particles-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 999;
}

@keyframes shake {
  0%, 100% { transform: translateX(0) translateY(0); }
  25% { transform: translateX(-2px) translateY(-1px); }
  50% { transform: translateX(2px) translateY(1px); }
  75% { transform: translateX(-1px) translateY(2px); }
}

@keyframes criticalGlow {
  0% { box-shadow: 0 0 20px rgba(255,0,0,0.5); }
  100% { box-shadow: 0 0 40px rgba(255,0,0,0.8), 0 0 60px rgba(255,0,0,0.4); }
}

@keyframes pulse {
  0%, 100% { transform: scale(1); }
  50% { transform: scale(1.1); }
}

@keyframes screenShake {
  0%, 100% { transform: translate(0, 0); }
  10% { transform: translate(-5px, -2px); }
  20% { transform: translate(5px, 2px); }
  30% { transform: translate(-3px, 3px); }
  40% { transform: translate(3px, -3px); }
  50% { transform: translate(-2px, 2px); }
  60% { transform: translate(2px, -2px); }
  70% { transform: translate(-1px, 1px); }
  80% { transform: translate(1px, -1px); }
  90% { transform: translate(-1px, -1px); }
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

@keyframes slideIn {
  from { opacity: 0; transform: translateY(-50px); }
  to { opacity: 1; transform: translateY(0); }
}

.freeze-slider:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

---script.js---
// Initialize the CryoLemon Burst application
const initApp = () => {
  // DOM element references
  const freezeSlider = document.getElementById('freeze-slider');
  const barrelContainer = document.getElementById('barrel-container');
  const juice = document.getElementById('juice');
  const statusDisplay = document.getElementById('status-display');
  const freezingLevelDisplay = statusDisplay.querySelector('.freezing-level');
  const statusText = statusDisplay.querySelector('.status-text');
  const resetBtn = document.getElementById('reset-btn');
  const instructionsBtn = document.getElementById('instructions-btn');
  const instructionsModal = document.getElementById('instructions-modal');
  const closeBtn = instructionsModal.querySelector('.close-btn');
  const mainContainer = document.querySelector('.main-container');
  const frostLayer = document.querySelector('.frost-layer');
  const strainLines = document.querySelector('.strain-lines');
  const particlesContainer = document.getElementById('particles-container');
  
  // Audio elements
  const ambientAudio = document.getElementById('ambient-audio');
  const burstAudio = document.getElementById('burst-audio');
  
  // Application state
  let freezingLevel = 0;
  const burstThreshold = 92;
  let isBursted = false;
  let particlesActive = false;
  
  // Initialize audio
  ambientAudio.volume = 0;
  ambientAudio.currentTime = 0;
  
  // Create synthetic audio context for better browser compatibility
  const createAudioContext = () => {
    try {
      const audioContext = new (window.AudioContext || window.webkitAudioContext)();
      return audioContext;
    } catch (e) {
      console.log('Audio not supported');
      return null;
    }
  };
  
  const audioContext = createAudioContext();
  
  // Utility functions
  const lerp = (start, end, factor) => start + (end - start) * factor;
  
  const hslToRgb = (h, s, l) => {
    const c = (1 - Math.abs(2 * l - 1)) * s;
    const x = c * (1 - Math.abs((h / 60) % 2 - 1));
    const m = l - c / 2;
    let r, g, b;
    
    if (h >= 0 && h < 60) [r, g, b] = [c, x, 0];
    else if (h >= 60 && h < 120) [r, g, b] = [x, c, 0];
    else if (h >= 120 && h < 180) [r, g, b] = [0, c, x];
    else if (h >= 180 && h < 240) [r, g, b] = [0, x, c];
    else if (h >= 240 && h < 300) [r, g, b] = [x, 0, c];
    else [r, g, b] = [c, 0, x];
    
    return [
      Math.round((r + m) * 255),
      Math.round((g + m) * 255),
      Math.round((b + m) * 255)
    ];
  };
  
  // Particle system
  const createParticles = () => {
    if (particlesActive) return;
    particlesActive = true;
    
    const canvas = document.createElement('canvas');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    canvas.style.position = 'fixed';
    canvas.style.top = '0';
    canvas.style.left = '0';
    canvas.style.pointerEvents = 'none';
    canvas.style.zIndex = '999';
    
    particlesContainer.appendChild(canvas);
    const ctx = canvas.getContext('2d');
    
    const particles = [];
    const barrelRect = barrelContainer.getBoundingClientRect();
    const centerX = barrelRect.left + barrelRect.width / 2;
    const centerY = barrelRect.top + barrelRect.height / 2;
    
    // Create ice shard particles
    for (let i = 0; i < 50; i++) {
      particles.push({
        x: centerX,
        y: centerY,
        vx: (Math.random() - 0.5) * 20,
        vy: (Math.random() - 0.5) * 20 - 5,
        size: Math.random() * 8 + 2,
        color: `hsl(${Math.random() * 60 + 180}, 70%, ${Math.random() * 30 + 60}%)`,
        life: 1,
        decay: Math.random() * 0.02 + 0.01,
        type: 'ice'
      });
    }
    
    // Create lemon juice particles
    for (let i = 0; i < 30; i++) {
      particles.push({
        x: centerX,
        y: centerY,
        vx: (Math.random() - 0.5) * 15,
        vy: (Math.random() - 0.5) * 15 - 3,
        size: Math.random() * 6 + 3,
        color: `hsl(${Math.random() * 30 + 45}, 90%, ${Math.random() * 20 + 50}%)`,
        life: 1,
        decay: Math.random() * 0.015 + 0.008,
        type: 'juice'
      });
    }
    
    const animate = () => {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      
      for (let i = particles.length - 1; i >= 0; i--) {
        const p = particles[i];
        
        // Update position
        p.x += p.vx;
        p.y += p.vy;
        p.vy += 0.3; // gravity
        p.vx *= 0.99; // air resistance
        
        // Update life
        p.life -= p.decay;
        
        if (p.life <= 0) {
          particles.splice(i, 1);
          continue;
        }
        
        // Draw particle
        ctx.save();
        ctx.globalAlpha = p.life;
        ctx.fillStyle = p.color;
        
        if (p.type === 'ice') {
          // Draw angular ice shard
          ctx.translate(p.x, p.y);
          ctx.rotate(Math.atan2(p.vy, p.vx));
          ctx.fillRect(-p.size / 2, -p.size / 4, p.size, p.size / 2);
        } else {
          // Draw round juice droplet
          ctx.beginPath();
          ctx.arc(p.x, p.y, p.size * p.life, 0, Math.PI * 2);
          ctx.fill();
        }
        
        ctx.restore();
      }
      
      if (particles.length > 0) {
        requestAnimationFrame(animate);
      } else {
        particlesContainer.removeChild(canvas);
        particlesActive = false;
      }
    };
    
    animate();
  };
  
  // Update all visual elements based on freezing level
  const updateVisuals = () => {
    if (isBursted) return;
    
    const factor = freezingLevel / 100;
    
    // Update status display
    freezingLevelDisplay.textContent = `${freezingLevel}%`;
    
    // Update status text and color
    if (freezingLevel < 30) {
      statusText.textContent = 'Stable';
      statusText.style.color = '#27ae60';
    } else if (freezingLevel < 60) {
      statusText.textContent = 'Expanding...';
      statusText.style.color = '#f39c12';
    } else if (freezingLevel < burstThreshold - 15) {
      statusText.textContent = 'Critical Expansion';
      statusText.style.color = '#e67e22';
    } else {
      statusText.textContent = 'CRITICAL!';
      statusText.style.color = '#e74c3c';
    }
    
    // Barrel expansion
    const scaleX = 1 + factor * 0.4;
    const scaleY = 1 + factor * 0.3;
    barrelContainer.style.transform = `scaleX(${scaleX}) scaleY(${scaleY})`;
    
    // Juice color transformation
    const hue = lerp(45, 200, factor); // Yellow to light blue
    const saturation = lerp(90, 30, factor);
    const lightness = lerp(60, 85, factor);
    const [r, g, b] = hslToRgb(hue, saturation / 100, lightness / 100);
    juice.style.background = `linear-gradient(135deg, rgb(${r}, ${g}, ${b}), rgb(${Math.max(0, r-30)}, ${Math.max(0, g-30)}, ${Math.max(0, b-30)}))`;
    
    // Background color change
    const bgHue = lerp(45, 200, factor);
    const bgSat = lerp(100, 60, factor);
    const bgLight = lerp(70, 85, factor);
    const [bgR, bgG, bgB] = hslToRgb(bgHue, bgSat / 100, bgLight / 100);
    mainContainer.style.background = `linear-gradient(135deg, rgb(${bgR}, ${bgG}, ${bgB}), rgb(${Math.max(0, bgR-40)}, ${Math.max(0, bgG-40)}, ${Math.max(0, bgB-40)}))`;
    
    // Frost layer
    frostLayer.style.opacity = Math.min(factor * 1.2, 0.8);
    
    // Strain lines
    if (factor > 0.6) {
      strainLines.style.opacity = (factor - 0.6) * 2;
    } else {
      strainLines.style.opacity = 0;
    }
    
    // Material strain effects
    const brightness = lerp(1, 0.8, factor);
    const contrast = lerp(1, 1.3, factor);
    barrelContainer.style.filter = `brightness(${brightness}) contrast(${contrast})`;
    
    // Critical warning effects
    if (freezingLevel >= burstThreshold - 15 && freezingLevel < burstThreshold) {
      barrelContainer.classList.add('critical-warning');
    } else {
      barrelContainer.classList.remove('critical-warning');
    }
    
    // Ambient audio
    if (ambientAudio && !ambientAudio.paused) {
      ambientAudio.volume = Math.min(factor * 0.3, 0.3);
      ambientAudio.playbackRate = 1 + factor * 0.5;
    }
  };
  
  // Check if burst condition is met
  const checkBurstCondition = () => {
    if (freezingLevel >= burstThreshold && !isBursted) {
      triggerBurst();
    }
  };
  
  // Trigger the burst effect
  const triggerBurst = () => {
    isBursted = true;
    freezeSlider.disabled = true;
    
    // Update status
    statusText.textContent = 'BURSTED!';
    statusText.style.color = '#e74c3c';
    statusText.style.fontSize = '1.5rem';
    statusDisplay.classList.add('bursted');
    
    // Hide barrel
    barrelContainer.style.opacity = '0';
    barrelContainer.classList.remove('critical-warning');
    
    // Screen shake
    mainContainer.classList.add('screen-shake');
    setTimeout(() => {
      mainContainer.classList.remove('screen-shake');
    }, 500);
    
    // Stop ambient audio and play burst sound
    if (ambientAudio) {
      ambientAudio.pause();
    }
    
    if (burstAudio) {
      burstAudio.currentTime = 0;
      burstAudio.volume = 0.5;
      burstAudio.play().catch(() => {
        // Handle audio play failure silently
      });
    }
    
    // Create particle explosion
    createParticles();
  };
  
  // Reset the simulation
  const resetSimulation = () => {
    // Reset state
    freezingLevel = 0;
    isBursted = false;
    
    // Reset UI elements
    freezeSlider.value = 0;
    freezeSlider.disabled = false;
    barrelContainer.style.opacity = '1';
    barrelContainer.classList.remove('critical-warning');
    statusDisplay.classList.remove('bursted');
    mainContainer.classList.remove('screen-shake');
    
    // Reset status text style
    statusText.style.fontSize = '1.2rem';
    
    // Clear any active particles
    while (particlesContainer.firstChild) {
      particlesContainer.removeChild(particlesContainer.firstChild);
    }
    particlesActive = false;
    
    // Restart ambient audio
    if (ambientAudio) {
      ambientAudio.currentTime = 0;
      ambientAudio.volume = 0;
      ambientAudio.play().catch(() => {
        // Handle audio play failure silently
      });
    }
    
    // Update visuals to initial state
    updateVisuals();
  };
  
  // Event listeners
  if (freezeSlider) {
    freezeSlider.addEventListener('input', (e) => {
      if (isBursted) return;
      
      freezingLevel = parseInt(e.target.value);
      updateVisuals();
      checkBurstCondition();
    });
    
    // Start ambient audio on first interaction
    freezeSlider.addEventListener('input', () => {
      if (ambientAudio && ambientAudio.paused) {
        ambientAudio.play().catch(() => {
          // Handle audio play failure silently
        });
      }
    }, { once: true });
  }
  
  if (resetBtn) {
    resetBtn.addEventListener('click', resetSimulation);
  }
  
  if (instructionsBtn) {
    instructionsBtn.addEventListener('click', () => {
      instructionsModal.style.display = 'block';
    });
  }
  
  if (closeBtn) {
    closeBtn.addEventListener('click', () => {
      instructionsModal.style.display = 'none';
    });
  }
  
  // Close modal when clicking outside
  if (instructionsModal) {
    instructionsModal.addEventListener('click', (e) => {
      if (e.target === instructionsModal) {
        instructionsModal.style.display = 'none';
      }
    });
  }
  
  // Keyboard accessibility
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && instructionsModal.style.display === 'block') {
      instructionsModal.style.display = 'none';
    }
  });
  
  // Initialize the application
  updateVisuals();
  
  // Preload audio
  if (ambientAudio) {
    ambientAudio.load();
  }
  if (burstAudio) {
    burstAudio.load();
  }
};