---index.html---
<div id="app">
  <div class="game-container">
    <h1>Scientific Field Challenge</h1>
    
    <div class="score-container">
      <div class="score">Score: <span id="current-score">0</span></div>
      <div class="high-score">High Score: <span id="high-score">0</span></div>
    </div>
    
    <div class="timer-container">
      <div class="timer">Time: <span id="timer">10</span>s</div>
    </div>
    
    <div id="game-area" class="game-area">
      <div class="question-container">
        <h2>What is the general field for:</h2>
        <div id="specific-field" class="specific-field">Neuropathology</div>
      </div>
      
      <div id="answer-buttons" class="answer-buttons">
        <!-- Buttons will be generated dynamically -->
      </div>
    </div>
    
    <div id="game-over" class="game-over hidden">
      <h2>Game Over!</h2>
      <p>Final Score: <span id="final-score">0</span></p>
      <button id="restart-btn" class="restart-btn">Play Again</button>
    </div>
    
    <div id="start-screen" class="start-screen">
      <button id="start-btn" class="start-btn">Start Game</button>
    </div>
  </div>
</div>

---style.css---
.game-container {
  max-width: 800px;
  margin: 0 auto;
  padding: 20px;
  text-align: center;
  font-family: Arial, sans-serif;
}

.game-container h1 {
  color: #2c3e50;
  margin-bottom: 30px;
}

.score-container {
  display: flex;
  justify-content: space-between;
  margin-bottom: 20px;
  font-size: 18px;
  font-weight: bold;
}

.score {
  color: #27ae60;
}

.high-score {
  color: #e74c3c;
}

.timer-container {
  margin-bottom: 30px;
}

.timer {
  font-size: 24px;
  font-weight: bold;
  color: #f39c12;
  padding: 10px;
  background-color: #ecf0f1;
  border-radius: 5px;
  display: inline-block;
}

.question-container {
  margin-bottom: 30px;
}

.question-container h2 {
  color: #34495e;
  margin-bottom: 15px;
}

.specific-field {
  font-size: 28px;
  font-weight: bold;
  color: #2980b9;
  background-color: #ecf0f1;
  padding: 20px;
  border-radius: 10px;
  margin-bottom: 20px;
}

.answer-buttons {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 15px;
  margin-bottom: 20px;
}

.answer-btn {
  padding: 15px 20px;
  font-size: 16px;
  font-weight: bold;
  background-color: #3498db;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.answer-btn:hover {
  background-color: #2980b9;
}

.answer-btn:active {
  transform: translateY(2px);
}

.game-over {
  background-color: #ecf0f1;
  padding: 30px;
  border-radius: 10px;
  margin-top: 20px;
}

.game-over h2 {
  color: #e74c3c;
  margin-bottom: 15px;
}

.restart-btn, .start-btn {
  padding: 15px 30px;
  font-size: 18px;
  font-weight: bold;
  background-color: #27ae60;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

.restart-btn:hover, .start-btn:hover {
  background-color: #229954;
}

.start-screen {
  padding: 50px;
}

.hidden {
  display: none;
}

---script.js---
function initApp() {
  const scientificFields = [
    { specificField: "Neuropathology", generalField: "Biology" },
    { specificField: "Quantum Mechanics", generalField: "Physics" },
    { specificField: "Social Psychology", generalField: "Social Sciences" },
    { specificField: "Organic Chemistry", generalField: "Chemistry" },
    { specificField: "Developmental Biology", generalField: "Biology" },
    { specificField: "Thermodynamics", generalField: "Physics" },
    { specificField: "Anthropology", generalField: "Social Sciences" },
    { specificField: "Biochemistry", generalField: "Chemistry" },
    { specificField: "Astrophysics", generalField: "Physics" },
    { specificField: "Cognitive Psychology", generalField: "Social Sciences" },
    { specificField: "Molecular Biology", generalField: "Biology" },
    { specificField: "Physical Chemistry", generalField: "Chemistry" },
    { specificField: "Particle Physics", generalField: "Physics" },
    { specificField: "Sociology", generalField: "Social Sciences" },
    { specificField: "Genetics", generalField: "Biology" },
    { specificField: "Inorganic Chemistry", generalField: "Chemistry" }
  ];

  const generalFields = ["Biology", "Physics", "Chemistry", "Social Sciences"];

  let currentScore = 0;
  let highScore = parseInt(localStorage.getItem('scientificFieldHighScore') || '0');
  let currentQuestionIndex = 0;
  let gameTimer = null;
  let timeRemaining = 10;
  let baseTimePerQuestion = 10;
  let shuffledFields = [];
  let currentCorrectAnswer = "";

  const currentScoreEl = document.getElementById('current-score');
  const highScoreEl = document.getElementById('high-score');
  const timerEl = document.getElementById('timer');
  const specificFieldEl = document.getElementById('specific-field');
  const answerButtonsEl = document.getElementById('answer-buttons');
  const gameAreaEl = document.getElementById('game-area');
  const gameOverEl = document.getElementById('game-over');
  const finalScoreEl = document.getElementById('final-score');
  const restartBtnEl = document.getElementById('restart-btn');
  const startBtnEl = document.getElementById('start-btn');
  const startScreenEl = document.getElementById('start-screen');

  if (!currentScoreEl || !highScoreEl || !timerEl || !specificFieldEl || !answerButtonsEl || 
      !gameAreaEl || !gameOverEl || !finalScoreEl || !restartBtnEl || !startBtnEl || !startScreenEl) {
    console.error('Required DOM elements not found');
    return;
  }

  function updateDisplay() {
    currentScoreEl.textContent = currentScore;
    highScoreEl.textContent = highScore;
    timerEl.textContent = timeRemaining;
  }

  function shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
  }

  function startTimer() {
    const timePerQuestion = Math.max(3, baseTimePerQuestion - Math.floor(currentScore / 3));
    timeRemaining = timePerQuestion;
    updateDisplay();
    
    gameTimer = setInterval(() => {
      timeRemaining--;
      updateDisplay();
      
      if (timeRemaining <= 0) {
        clearInterval(gameTimer);
        gameOver();
      }
    }, 1000);
  }

  function nextQuestion() {
    if (gameTimer) {
      clearInterval(gameTimer);
    }

    if (currentQuestionIndex >= shuffledFields.length) {
      shuffledFields = shuffleArray(scientificFields);
      currentQuestionIndex = 0;
    }

    const currentField = shuffledFields[currentQuestionIndex];
    currentCorrectAnswer = currentField.generalField;
    
    specificFieldEl.textContent = currentField.specificField;
    
    const incorrectAnswers = generalFields.filter(field => field !== currentCorrectAnswer);
    const shuffledIncorrect = shuffleArray(incorrectAnswers).slice(0, 3);
    const allAnswers = shuffleArray([currentCorrectAnswer, ...shuffledIncorrect]);
    
    answerButtonsEl.innerHTML = '';
    
    allAnswers.forEach(answer => {
      const button = document.createElement('button');
      button.className = 'answer-btn';
      button.textContent = answer;
      button.addEventListener('click', () => handleAnswer(answer));
      answerButtonsEl.appendChild(button);
    });
    
    currentQuestionIndex++;
    startTimer();
  }

  function handleAnswer(selectedAnswer) {
    if (gameTimer) {
      clearInterval(gameTimer);
    }
    
    if (selectedAnswer === currentCorrectAnswer) {
      currentScore++;
      updateDisplay();
      nextQuestion();
    } else {
      gameOver();
    }
  }

  function gameOver() {
    if (gameTimer) {
      clearInterval(gameTimer);
    }
    
    if (currentScore > highScore) {
      highScore = currentScore;
      localStorage.setItem('scientificFieldHighScore', highScore.toString());
      updateDisplay();
    }
    
    finalScoreEl.textContent = currentScore;
    gameAreaEl.classList.add('hidden');
    gameOverEl.classList.remove('hidden');
  }

  function startGame() {
    currentScore = 0;
    currentQuestionIndex = 0;
    shuffledFields = shuffleArray(scientificFields);
    
    startScreenEl.classList.add('hidden');
    gameOverEl.classList.add('hidden');
    gameAreaEl.classList.remove('hidden');
    
    updateDisplay();
    nextQuestion();
  }

  function restartGame() {
    startGame();
  }

  startBtnEl.addEventListener('click', startGame);
  restartBtnEl.addEventListener('click', restartGame);

  updateDisplay();
}