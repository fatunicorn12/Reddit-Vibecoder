{
  "description": "A fast-paced, replayable arcade game where players must rapidly complete a target-clicking or key-pressing task within a 'blink interval' to survive. The game progressively increases in difficulty, tracks personal high scores, and contributes to a persistent global death counter upon failure, all presented with an impressive, polished web interface.",
  "features": [
    "Core 'Blink Interval' Survival Mechanic: Player must complete a task within a short, dynamically decreasing time limit.",
    "Dynamic Difficulty Scaling: Blink interval duration decreases, number of active tasks increases, and task complexity varies with each survived round.",
    "Multiple Task Types: Features point-and-click target tasks, specific key-press tasks, and sequential key-press tasks.",
    "Current Score & Best Score Tracking: Displays rounds survived in current game and persistently stores the player's highest rounds survived using localStorage.",
    "Persistent Cumulative Global Deaths: Increments a 'global deaths' counter stored in localStorage each time a game ends, displayed prominently on start/game over screens.",
    "Game Over & Clean Restart: Clear game over screen displaying final stats (current score, high score, global deaths) with a smooth transition to restart.",
    "On-screen Countdown Timer/Progress Bar: A clear visual indicator showing the remaining time within the 'blink interval', with critical state warnings.",
    "Visual Feedback for Actions: Immediate and distinct visual cues (e.g., glows, fades, 'Miss!' text) for successful task completions and failures.",
    "Dynamic Theming/Background: Visual changes in color scheme, intensity, or subtle animations to reflect increasing difficulty and game state.",
    "Start Screen & Tutorial Overlay: Welcoming screen with prominent 'Start Game' button, current high score, global deaths, and an accessible 'How to Play' tutorial modal.",
    "Pause/Resume Functionality: Allows players to temporarily halt the game and resume seamlessly.",
    "Responsive Layout: Ensures the game UI elements adapt gracefully within a predefined container for various desktop browser window sizes."
  ],
  "ui_polish": [
    "Particle Effects: On successful target clicks, correct key presses, and a different effect for task failures.",
    "Screen Shake: Subtle screen shake effect on critical failures, near-misses, or when reaching new difficulty tiers.",
    "Smooth UI Transitions: Graceful fade-ins/outs and slide animations for changing game states (Start, Playing, Paused, Game Over) and UI element updates.",
    "Dynamic Color Palette: The game's background and core UI elements subtly shift their color scheme as difficulty escalates, or on significant game events.",
    "Animated Score & Feedback Pop-ups: Scores (`+1`, `+N`) float up from completed tasks, and messages like 'FAIL!' or 'Perfect!' animate prominently on relevant events."
  ],
  "steps": [
    "1. **HTML Structure (index.html):**\n   - Create a main `div` container for the entire game.\n   - Inside, create distinct sections for `start-screen`, `game-area`, `game-over-screen`, `pause-menu`, and `tutorial-modal`.\n   - `start-screen`: Title, 'Start Game' button, 'How to Play' button, `high-score-display`, `global-deaths-display`.\n   - `game-area`: `score-display`, `timer-bar`, a `task-container` for dynamic targets/key prompts.\n   - `game-over-screen`: Final score, current high score, global deaths, 'Play Again' button.\n   - `pause-menu`: 'Paused' text, 'Resume' button.\n   - `tutorial-modal`: Instructions for click and key-press tasks, 'Close' button.\n   - Link `style.css` and `script.js`.",
    "2. **Basic CSS Styling (style.css):**\n   - Apply a clean, modern dark theme with good contrast. Use custom CSS variables for colors to facilitate dynamic theming.\n   - Style all UI elements: buttons, score displays, progress bar, modals.\n   - Implement Flexbox/Grid for robust layout and responsiveness within the main game container.\n   - Initially hide all game state sections except the `start-screen` using `display: none` or `opacity: 0; visibility: hidden;` for transition readiness.\n   - Define basic keyframe animations for button hovers, score pulses, and simple UI element movements.",
    "3. **JavaScript Core (script.js): Game State Management & Persistence:**\n   - Define an `enum` or object for game states (`GAME_STATE_START`, `GAME_STATE_PLAYING`, `GAME_STATE_PAUSED`, `GAME_STATE_GAME_OVER`, `GAME_STATE_TUTORIAL`).\n   - Create functions (`showScreen(state)`, `hideAllScreens()`) to manage UI visibility based on `currentGameState`.\n   - Initialize `currentScore = 0`, `difficultyLevel = 1`, `blinkIntervalDuration = 2000` (initial).\n   - Load `highScore` and `globalDeaths` from `localStorage` on script initialization and display on `start-screen`.",
    "4. **Core Game Loop & Blink Interval Logic:**\n   - Implement a main game loop using `requestAnimationFrame` for smooth animations and a `setInterval` or `setTimeout` chain for precise game logic (like task timing).\n   - `startGame()` function: Sets `currentGameState` to `PLAYING`, resets scores/difficulty, clears `game-area`, and calls `startBlinkInterval()`.\n   - `startBlinkInterval()` function:\n     - Resets the `roundTimer` (time elapsed in current blink).\n     - Calls `spawnTask()` to generate tasks for the current round.\n     - Starts a `requestAnimationFrame` loop to update the `timer-bar` visually.\n     - Sets a `setTimeout` for `blinkIntervalDuration`: if the task isn't completed before this timeout, trigger `gameOver()`.",
    "5. **Task Generation (Initial Click Task):**\n   - Implement `spawnTask()`:\n     - Based on `difficultyLevel`, determine the number of targets to spawn.\n     - For 'Click Task': Create `N` `div` elements, assign `target` class, and position them randomly within `task-container`.\n     - Attach `click` event listeners to each target. On click: `handleTargetClick(event.target)`.\n   - `handleTargetClick(targetElement)`:\n     - Mark target as 'hit' (e.g., add `hit` class, remove from DOM).\n     - Play success particle effect.\n     - Check if all active tasks are completed. If yes, call `taskCompleted()`.",
    "6. **Input Handling & Validation:**\n   - **Click Task:** The `handleTargetClick` function is the primary input handler. Ensure clicks outside targets do not penalize until key-press tasks are introduced.\n   - **Key Press Task (Later):** Add a `keydown` event listener to `window`.\n     - In `handleKeyDown(event)`: Check if `currentGameState` is `PLAYING`. If a key-press task is active, validate `event.key` against the required key. If correct, mark task as complete and play success effect.",
    "7. **Score Tracking & Display:**\n   - `taskCompleted()` function: Increments `currentScore`, triggers score animation, initiates `nextRound()`.\n   - Update `current-score-display` during gameplay.\n   - `gameOver()` function:\n     - Stops all game loops and timers.\n     - Compares `currentScore` with `highScore`, updates `highScore` in `localStorage` if current is higher.\n     - Increments `globalDeaths` and saves to `localStorage`.\n     - Transitions to `game-over-screen`, displaying `currentScore`, `highScore`, and `globalDeaths`.",
    "8. **Difficulty Scaling:**\n   - In `nextRound()` (called after `taskCompleted()`):\n     - Increment `difficultyLevel`.\n     - Decrease `blinkIntervalDuration` (e.g., `blinkIntervalDuration *= 0.95`, with a minimum threshold).\n     - Increase the number of targets for click tasks or complexity for key tasks every few rounds.\n     - Potentially introduce new task types at specific difficulty thresholds.\n     - Call `startBlinkInterval()` for the next round.",
    "9. **UI Polish Integration:**\n   - **Particles:** Implement a simple `Particle` class (or use dynamically created `div`s with CSS animations) for effects. Manage their creation and destruction.\n   - **Screen Shake:** Apply a CSS class (`.shake`) to the game container, which triggers a `transform: translate()` animation, then remove it quickly.\n   - **Smooth Transitions:** Use CSS `transition` properties for `opacity`, `transform` on game screen containers. Control visibility using `visibility` and `opacity` in JS.\n   - **Dynamic Color Palette:** On `nextRound()` or `difficultyLevel` change, update CSS custom properties (e.g., `--game-bg-color`) via JS, which will trigger transitions on elements using these variables.\n   - **Animated Score Pop-ups:** On task completion, create a new `div` (e.g., `+1`), position it near the task, and apply CSS animations for fade-out and upward movement.",
    "10. **Task Variety Implementation:**\n    - Extend `spawnTask()` to randomly select task type based on `difficultyLevel`:\n      - **Click Task:** (Already done).\n      - **Key Press Task:** Display a random letter/number on screen. Player must press that key. Attach specific `keydown` listener for this task type.\n      - **Sequential Key Press Task:** Display a sequence (e.g., 'QWE'). Player must press keys in order. Track sequence progress.\n    - For each task type, implement specific input validation and `taskCompleted` logic.",
    "11. **On-Screen Timer/Progress Bar:**\n    - In the `requestAnimationFrame` loop (within `startBlinkInterval`), update the `width` of the `timer-bar` element dynamically based on `roundTimer` and `blinkIntervalDuration`.\n    - Add a CSS class (e.g., `blink-warning`) to the timer bar when remaining time is very low, triggering a flashing animation or color change.",
    "12. **Start Screen & Tutorial:**\n    - Add event listeners to 'Start Game' (calls `startGame()`) and 'How to Play' (shows `tutorial-modal`).\n    - Add a 'Close' button listener to `tutorial-modal` to hide it.\n    - Ensure `highScore` and `globalDeaths` are loaded and displayed on the start screen correctly.",
    "13. **Pause Functionality:**\n    - Add a 'Pause' button listener or `keydown` listener (e.g., 'P' key).\n    - On pause: Set `currentGameState` to `PAUSED`, show `pause-menu`, stop `requestAnimationFrame` loop and `setInterval` for blink timer. Store current `roundTimer` progress.\n    - On resume: Hide `pause-menu`, set `currentGameState` to `PLAYING`, resume `requestAnimationFrame` and `setInterval` from the stored `roundTimer` progress."
  ],
  "dependencies": []
}