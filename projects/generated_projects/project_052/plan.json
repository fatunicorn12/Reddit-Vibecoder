{
  "description": "A static web application (HTML/CSS/JS) designed to simulate the experience of moderating a subreddit. Users are presented with procedurally generated mock posts and comments, along with a set of active subreddit rules. The goal is to identify violations and make correct moderation decisions (Approve/Remove) to earn points. The app provides immediate visual feedback, scales difficulty, tracks scores, and includes a persistent high score feature, making it an engaging and practical training tool.",
  "features": [
    "Main Menu Screen: 'Start Moderating', 'How to Play', 'Rules Settings', 'High Scores' options.",
    "Dynamic Content Generation: Procedural creation of mock posts and comments with varied titles, bodies, authors, and metadata (upvotes, timestamp).",
    "Customizable Rule Sets: Users can enable/disable different pre-defined subreddit rules (e.g., 'No Personal Attacks', 'No Spam', 'Off-Topic Content') via a settings screen, persisted with localStorage.",
    "Interactive Moderation Interface: A dedicated display area for the current post/comment with prominent 'Approve', 'Remove', and 'Skip' action buttons.",
    "Intelligent Violation Identification: The system can programmatically determine if a generated post/comment violates any of the currently active rules.",
    "Immediate Visual Feedback: Clear 'Correct!' (green) or 'Incorrect!' (red) messages, point changes, and visual highlights on the moderated item after each decision.",
    "Scoring System with Streak Bonus: Points awarded for correct decisions, deducted for incorrect ones. Consecutive correct decisions increase a streak multiplier.",
    "Progressive Difficulty Scaling: As the player's score increases, the posts/comments present more subtle violations, rule sets become more complex, or a time limit is introduced/reduced.",
    "Persistent High Score Tracking: Utilizes localStorage to save and display the all-time highest score.",
    "Game Over Condition: Reaching a negative score threshold or exhausting a 'lives' counter results in a game over screen.",
    "Comprehensive Instructions/Tutorial: A 'How to Play' screen detailing objectives, scoring, rule types, and moderation actions.",
    "In-game 'Return to Main Menu' Functionality: Button accessible during gameplay and on the game over screen for easy navigation."
  ],
  "ui_polish": [
    "Card-based UI with Interactive Hover Effects: Posts and comments displayed in distinct, styled cards. Action buttons and interactive elements will feature subtle lift/shadow animations on hover, indicating interactivity.",
    "Dynamic Decision Feedback Animations: Score changes (+/- points) will pop up and animate away from the moderated item. Correct/Incorrect decisions will trigger a quick, color-coded border flash or particle burst around the post card.",
    "Smooth Screen Transitions: Navigation between the Main Menu, Game, Instructions, and Settings screens will utilize elegant fade-in/out or slide-in/out CSS transitions for a fluid user experience.",
    "Visual Difficulty/Progress Indicator: A 'heat' meter or progress bar visually representing the current difficulty level or an impending time limit, changing colors (e.g., green to yellow to red) as difficulty increases or time depletes.",
    "Cohesive Themed Color Scheme & Typography: A clean, modern UI with a carefully selected, consistent color palette (e.g., dark mode with vibrant accents) and legible, professional fonts for an appealing aesthetic."
  ],
  "steps": [
    "**1. Initial HTML Structure (`index.html`):** Create core `div` containers for `main-menu`, `game-screen`, `instructions-screen`, `settings-screen`, `game-over-screen`. Link `style.css` and `script.js`.",
    "**2. Base CSS Styling (`style.css`):** Implement a global reset, define a modern themed color palette (background, text, primary/secondary accents), basic typography, and initial layout for all screens (e.g., centered content, `display: none` for inactive screens). Style buttons with basic hover effects.",
    "**3. Core JavaScript - Screen Management (`script.js`):** Implement `showScreen(screenId)` and `hideScreen(screenId)` functions. Add event listeners to main menu buttons to navigate between screens. Ensure smooth transitions for `opacity` (fade-in/out) via CSS `transition` properties when showing/hiding screens.",
    "**4. Data Models and Rule Definitions (JS):** Define a `RULES` array of objects, each with `id`, `name`, `description`, `keywords` (for violation detection), and `severity` (for scoring/difficulty). Create `POST_TEMPLATES` (array of objects with `titleParts`, `bodyParts`, `violationTypes` hints) and `VIOLATION_INDICATORS` (map of rule ID to potential phrases) to aid content generation.",
    "**5. Content Generation Logic (JS):** Implement `generatePost()`: Randomly select from `POST_TEMPLATES`. Based on current `difficulty_level` and random chance, decide if the post *should* violate a random active rule. If so, inject relevant `VIOLATION_INDICATORS` into the title/body. Populate the `post-display-area` with title, body, author, timestamp, upvote count. Store the actual `isViolating` boolean and `violatedRuleId` internally.",
    "**6. Settings Screen Implementation (HTML/CSS/JS):** Dynamically populate the `settings-screen` with checkboxes for each `RULE`. Implement `saveSettings()` to store the array of active rule IDs in `localStorage`. `loadSettings()` function to retrieve and apply rules on startup and when returning to settings. Add 'Save' and 'Return to Main Menu' buttons.",
    "**7. Game State Management & Persistence (JS):** Initialize `gameState` object: `{ score: 0, high_score: 0, lives: 3, difficulty: 1, streak: 0, active_rules: [] }`. Load `high_score` and `active_rules` from `localStorage` on app initialization. Save `high_score` to `localStorage` when updated.",
    "**8. Moderation Interface & Decision Logic (HTML/JS):** Render the generated post in a card-like UI. Add 'Approve', 'Remove', 'Skip' buttons. Implement event listeners for these buttons: `handleApprove()`, `handleRemove()`, `handleSkip()`. Compare user's decision with `current_post.isViolating` to determine correctness.",
    "**9. Immediate Feedback & Scoring (JS/CSS):** Upon decision, update `gameState.score`, `lives`, `streak`. Display 'Correct!' (green text) or 'Incorrect!' (red text) feedback. Create and animate a score pop-up (`+10`, `-5`) using a new `span` element, CSS `position: absolute`, `transform: translateY` and `opacity` transitions. Briefly apply a `border-color` transition (green/red) to the post card element. Disable moderation buttons briefly during feedback animation.",
    "**10. Difficulty Scaling & Game Progression (JS):** Implement `updateDifficulty()`: Triggered every X points or Y correct answers. Increase `gameState.difficulty` by increasing the probability of subtle violations, reducing a time limit (if implemented), or enabling more complex rule types. Update a visual difficulty indicator (e.g., a progress bar changing color).",
    "**11. Game Over & High Score Display (JS/HTML):** Continuously check for `lives <= 0` or `score < -threshold`. If game over, `showScreen('game-over-screen')`. Update `high_score` in `localStorage` if current score exceeds it. Display current score and the persistent high score. Add 'Play Again' (resets game, calls `startGame()`) and 'Return to Main Menu' buttons.",
    "**12. Instructions Screen Content (HTML/CSS):** Populate `instructions-screen` with clear explanations of how to play, objectives, scoring rules, definitions of common violations, and how to use the moderation interface. Include basic examples for understanding rules. Add 'Return to Main Menu' button.",
    "**13. UI Polish - Card Design & Hover Effects (CSS):** Refine card styling for posts/comments (background, padding, border-radius, `box-shadow`). Apply `transform: translateY(-3px)` and `box-shadow` changes on hover for action buttons and the post card itself to add interactive depth.",
    "**14. UI Polish - Smooth Transitions & Visual Indicators (CSS/JS):** Ensure all screen changes have smooth fade/slide transitions. Implement a `difficulty-bar` element in the game header, using CSS `width` and `background-color` transitions to visually represent `gameState.difficulty` or a timer. Change bar color from green to red as difficulty/time progresses.",
    "**15. Responsive Layout (CSS):** Use `flexbox` or `grid` for major layout components to ensure content adapts nicely within a reasonable container width. Apply `max-width` to containers and `margin: auto` for centering. (Focus on desktop view within a specific range, not full mobile).",
    "**16. Edge Case Handling & Refinements (JS):** Ensure `localStorage` reads are robust (e.g., `JSON.parse(localStorage.getItem('key') || '[]')`). Prevent button spam by disabling moderation buttons until the feedback animation concludes and the next post is loaded. Enhance content generation with more diverse author names, comment structures, and subtly nuanced violations."
  ],
  "dependencies": []
}