{
  "description": "A simple GUI game where users identify short text snippets as human or AI-generated. Players aim for a high score by making correct choices before accumulating a set number of incorrect guesses. Difficulty increases as the game progresses by reducing the time allowed per snippet.",
  "features": [
    "Display of individual text snippets for classification.",
    "Two choice buttons: 'Human' and 'AI'.",
    "Real-time display of current score.",
    "Tracking and display of incorrect guesses (lives system).",
    "Game over condition when max incorrect guesses are reached.",
    "Difficulty scaling: time limit per snippet decreases with score.",
    "Display of the current high score (persistent within the session).",
    "Timer for each snippet, triggering an incorrect guess if time runs out.",
    "Clean game restart functionality after game over."
  ],
  "steps": [
    "**1. Project Setup:** Initialize a Tkinter window with a title and appropriate dimensions.",
    "**2. Game State Variables:** Define global variables: `current_score = 0`, `incorrect_guesses = 0`, `max_incorrect_guesses = 3`, `high_score = 0`, `game_active = False`, `snippets_pool` (list of dictionaries: `{'text': 'snippet content', 'is_ai': True/False}`), `current_snippet_data = None`, `initial_time_per_snippet = 10` (seconds), `time_per_snippet = initial_time_per_snippet`, `current_snippet_time_left = 0`, `snippet_timer_id = None` (for Tkinter `after` calls).",
    "**3. UI Layout:** Create Tkinter widgets:",
    "   - A large `Label` for `text_snippet_display` (to show the current text).",
    "   - Two `Button` widgets: `btn_human` and `btn_ai`, bound to a `make_guess` function.",
    "   - `Label` widgets for `lbl_current_score`, `lbl_incorrect_guesses`, `lbl_high_score`, and `lbl_time_left`.",
    "   - A `Label` for `lbl_game_message` (e.g., 'Correct!', 'Wrong!', 'Game Over!').",
    "   - A `Button` for `btn_start_game` ('Start Game' / 'Play Again'), bound to a `start_game` function.",
    "**4. Snippet Data Initialization:** Populate `snippets_pool` with at least 10-15 diverse, short example text snippets, explicitly marked as `is_ai: True` or `is_ai: False`.",
    "**5. `reset_game_state()` Function:**",
    "   - Set `current_score = 0`, `incorrect_guesses = 0`.",
    "   - Reset `time_per_snippet` to `initial_time_per_snippet`.",
    "   - Shuffle `snippets_pool` using `random.shuffle()`.",
    "   - Set `game_active = True`.",
    "   - Clear `lbl_game_message` text.",
    "**6. `start_game()` Function:**",
    "   - Call `reset_game_state()`.",
    "   - Update all score/lives/time labels.",
    "   - Call `display_next_snippet()`.",
    "   - Update `btn_start_game` text to 'Restart Game' (or hide it while playing).",
    "**7. `update_timer()` Function:**",
    "   - If `game_active` is False, return.",
    "   - Decrement `current_snippet_time_left` by 1.",
    "   - Update `lbl_time_left`.",
    "   - If `current_snippet_time_left <= 0`:",
    "     - Set `lbl_game_message` to 'Time's up!'.",
    "     - Increment `incorrect_guesses`.",
    "     - Call `display_next_snippet()`.",
    "   - Else: Schedule itself to run again in 1000ms using `window.after(1000, update_timer)`, storing the ID in `snippet_timer_id`.",
    "**8. `display_next_snippet()` Function:**",
    "   - If `snippet_timer_id` is active, cancel it using `window.after_cancel(snippet_timer_id)`.",
    "   - If `incorrect_guesses >= max_incorrect_guesses`: call `end_game()` and return.",
    "   - If `snippets_pool` is empty (optional, for small pools): re-shuffle `snippets_pool`.",
    "   - Pop a random snippet from `snippets_pool` and assign to `current_snippet_data`.",
    "   - Update `text_snippet_display` with `current_snippet_data['text']`.",
    "   - Update `lbl_current_score`, `lbl_incorrect_guesses`, `lbl_high_score`.",
    "   - Set `current_snippet_time_left = time_per_snippet`.",
    "   - Start the timer by calling `update_timer()`.",
    "**9. `make_guess(is_human_guess)` Function (parameter `True` for human guess, `False` for AI guess):**",
    "   - If `not game_active`, return.",
    "   - Cancel `snippet_timer_id`.",
    "   - Determine `correct_answer = not current_snippet_data['is_ai']` (if `is_human_guess`) or `current_snippet_data['is_ai']` (if `is_ai_guess`).",
    "   - If `(is_human_guess and not current_snippet_data['is_ai']) or (not is_human_guess and current_snippet_data['is_ai'])` (i.e., guess matches reality):",
    "     - Increment `current_score`.",
    "     - Update `lbl_game_message` to 'Correct!' (temporary).",
    "     - **Difficulty Scaling:** If `current_score % 5 == 0` (or another interval) and `time_per_snippet > 3`, decrement `time_per_snippet` by 1.",
    "   - Else (incorrect guess):",
    "     - Increment `incorrect_guesses`.",
    "     - Update `lbl_game_message` to 'Wrong!' (temporary).",
    "   - Call `display_next_snippet()`.",
    "**10. `end_game()` Function:**",
    "    - Set `game_active = False`.",
    "    - Cancel `snippet_timer_id` if active.",
    "    - If `current_score > high_score`, update `high_score` and `lbl_high_score`.",
    "    - Update `lbl_game_message` to 'Game Over! Your Score: X' and show the `btn_start_game` with 'Play Again'.",
    "**11. Main Loop:** Start the Tkinter event loop with `window.mainloop()`."
  ],
  "dependencies": [
    "tkinter",
    "random"
  ]
}