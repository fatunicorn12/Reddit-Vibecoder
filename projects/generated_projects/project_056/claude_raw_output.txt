---index.html---
<div class="main-container">
  <div class="countdown-section">
    <h1>üéÖ Santa's Global Gift Dash üéÑ</h1>
    <div class="countdown-display">
      <div class="countdown-item">
        <span id="days">00</span>
        <label>Days</label>
      </div>
      <div class="countdown-item">
        <span id="hours">00</span>
        <label>Hours</label>
      </div>
      <div class="countdown-item">
        <span id="minutes">00</span>
        <label>Minutes</label>
      </div>
      <div class="countdown-item">
        <span id="seconds">00</span>
        <label>Seconds</label>
      </div>
    </div>
  </div>

  <div class="app-layout">
    <div class="map-container">
      <div id="world-map">
        <svg viewBox="0 0 1000 500" class="world-svg">
          <image href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 1000 500'%3E%3Crect fill='%23164B60' width='1000' height='500'/%3E%3Cpath fill='%232D5F3F' d='M150 100h80v60h-80z M300 80h120v80h-120z M500 90h100v70h-100z M700 85h90v75h-90z M100 200h60v40h-60z M250 220h140v60h-140z M450 210h110v50h-110z M650 200h100v60h-100z M800 190h80v50h-80z M180 300h90v50h-90z M350 320h80v40h-80z M520 310h70v45h-70z M720 305h75v55h-75z M50 350h40v30h-40z M200 380h60v35h-60z M400 370h50v40h-50z M600 375h65v30h-65z M800 360h70v45h-70z'/%3E%3C/svg%3E" width="1000" height="500"/>
        </svg>
        <div id="santa-sleigh">üõ∑</div>
        <div id="santa-particles"></div>
      </div>
      <div class="progress-container">
        <div class="progress-bar">
          <div id="progress-fill"></div>
        </div>
        <span class="progress-text">Journey Progress</span>
      </div>
    </div>

    <div class="control-panel">
      <div class="info-section">
        <h3>üéÅ Journey Information</h3>
        <div class="info-item">
          <label>Current Location:</label>
          <span id="current-city">North Pole</span>
        </div>
        <div class="info-item">
          <label>Next Destination:</label>
          <span id="next-city">Tokyo</span>
        </div>
        <div class="info-item">
          <label>ETA:</label>
          <span id="eta">--:--</span>
        </div>
        <div class="info-item">
          <label>Cities Visited:</label>
          <span id="cities-visited">0 / 20</span>
        </div>
      </div>

      <div class="controls-section">
        <h3>üéÆ Journey Controls</h3>
        <div class="button-group">
          <button id="start-btn" class="control-btn primary">Start Journey</button>
          <button id="pause-btn" class="control-btn" disabled>Pause</button>
          <button id="reset-btn" class="control-btn secondary">Reset</button>
        </div>
        
        <div class="speed-control">
          <label for="speed-slider">Journey Speed:</label>
          <input type="range" id="speed-slider" min="0.5" max="5" step="0.5" value="1">
          <span id="speed-value">1x</span>
        </div>
      </div>

      <div class="status-section">
        <div id="journey-status" class="status-message">Ready to begin the magical journey!</div>
      </div>
    </div>
  </div>
</div>

---style.css---
:root {
  --festive-red: #C41E3A;
  --deep-red: #8B0000;
  --forest-green: #228B22;
  --dark-green: #006400;
  --gold: #FFD700;
  --bright-gold: #FFA500;
  --snow-white: #FFFAFA;
  --sparkle-white: #FFFFFF;
  --night-blue: #164B60;
  --warm-brown: #8B4513;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Georgia', 'Times New Roman', serif;
  background: linear-gradient(135deg, var(--night-blue), var(--dark-green));
  color: var(--snow-white);
  min-height: 100vh;
}

.main-container {
  padding: 20px;
  max-width: 1400px;
  margin: 0 auto;
}

.countdown-section {
  text-align: center;
  margin-bottom: 30px;
}

.countdown-section h1 {
  font-size: 2.5rem;
  margin-bottom: 20px;
  text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
  background: linear-gradient(45deg, var(--gold), var(--festive-red), var(--forest-green));
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.countdown-display {
  display: flex;
  justify-content: center;
  gap: 30px;
  flex-wrap: wrap;
}

.countdown-item {
  background: rgba(255,255,255,0.1);
  border: 2px solid var(--gold);
  border-radius: 15px;
  padding: 15px 20px;
  text-align: center;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
}

.countdown-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 10px 20px rgba(255,215,0,0.3);
}

.countdown-item span {
  display: block;
  font-size: 2.5rem;
  font-weight: bold;
  color: var(--gold);
  text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
  transition: all 0.3s ease;
}

.countdown-item label {
  font-size: 0.9rem;
  color: var(--snow-white);
  text-transform: uppercase;
  letter-spacing: 1px;
}

.app-layout {
  display: grid;
  grid-template-columns: 1fr 350px;
  gap: 30px;
  min-height: 600px;
}

.map-container {
  background: rgba(255,255,255,0.05);
  border: 2px solid var(--forest-green);
  border-radius: 20px;
  padding: 20px;
  position: relative;
  overflow: hidden;
  backdrop-filter: blur(5px);
}

#world-map {
  position: relative;
  width: 100%;
  height: 500px;
  border-radius: 15px;
  overflow: hidden;
  transition: transform 0.5s ease;
}

.world-svg {
  width: 100%;
  height: 100%;
  display: block;
}

#santa-sleigh {
  position: absolute;
  font-size: 2rem;
  z-index: 10;
  transition: none;
  filter: drop-shadow(2px 2px 4px rgba(0,0,0,0.5));
  animation: sleighBob 2s ease-in-out infinite;
}

@keyframes sleighBob {
  0%, 100% { transform: translateY(0px) rotate(0deg); }
  50% { transform: translateY(-3px) rotate(2deg); }
}

#santa-particles {
  position: absolute;
  pointer-events: none;
  z-index: 5;
}

.particle {
  position: absolute;
  width: 4px;
  height: 4px;
  background: var(--gold);
  border-radius: 50%;
  animation: sparkle 1.5s ease-out forwards;
  box-shadow: 0 0 6px var(--gold);
}

@keyframes sparkle {
  0% {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
  100% {
    opacity: 0;
    transform: scale(0.3) translateY(-20px);
  }
}

.city-marker {
  position: absolute;
  width: 12px;
  height: 12px;
  background: var(--festive-red);
  border: 2px solid var(--snow-white);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  transition: all 0.3s ease;
  z-index: 8;
}

.city-marker.current-city-highlight {
  animation: currentCityPulse 1.5s ease-in-out infinite;
  z-index: 9;
}

.city-marker.next-city-highlight {
  animation: nextCityGlow 2s ease-in-out infinite;
  z-index: 9;
}

@keyframes currentCityPulse {
  0%, 100% {
    transform: translate(-50%, -50%) scale(1);
    box-shadow: 0 0 0 0 rgba(196, 30, 58, 0.7);
    background: var(--festive-red);
  }
  50% {
    transform: translate(-50%, -50%) scale(1.3);
    box-shadow: 0 0 0 10px rgba(196, 30, 58, 0);
    background: var(--bright-gold);
  }
}

@keyframes nextCityGlow {
  0%, 100% {
    transform: translate(-50%, -50%) scale(1);
    box-shadow: 0 0 8px var(--gold);
    background: var(--gold);
  }
  50% {
    transform: translate(-50%, -50%) scale(1.1);
    box-shadow: 0 0 15px var(--bright-gold);
    background: var(--bright-gold);
  }
}

.progress-container {
  margin-top: 20px;
  text-align: center;
}

.progress-bar {
  width: 100%;
  height: 8px;
  background: rgba(255,255,255,0.2);
  border-radius: 4px;
  overflow: hidden;
  margin-bottom: 10px;
}

#progress-fill {
  height: 100%;
  background: linear-gradient(90deg, var(--forest-green), var(--gold), var(--festive-red));
  width: 0%;
  transition: width 0.5s ease;
  border-radius: 4px;
}

.progress-text {
  font-size: 0.9rem;
  color: var(--snow-white);
  opacity: 0.8;
}

.control-panel {
  background: rgba(255,255,255,0.08);
  border: 2px solid var(--gold);
  border-radius: 20px;
  padding: 25px;
  backdrop-filter: blur(10px);
  display: flex;
  flex-direction: column;
  gap: 25px;
}

.control-panel h3 {
  color: var(--gold);
  margin-bottom: 15px;
  text-align: center;
  font-size: 1.2rem;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.5);
}

.info-section {
  background: rgba(255,255,255,0.05);
  padding: 20px;
  border-radius: 15px;
  border: 1px solid rgba(255,215,0,0.3);
}

.info-item {
  display: flex;
  justify-content: space-between;
  margin-bottom: 12px;
  padding: 8px 0;
  border-bottom: 1px solid rgba(255,255,255,0.1);
}

.info-item:last-child {
  border-bottom: none;
  margin-bottom: 0;
}

.info-item label {
  font-weight: bold;
  color: var(--snow-white);
}

.info-item span {
  color: var(--gold);
  font-weight: bold;
  transition: all 0.3s ease;
}

.controls-section {
  background: rgba(255,255,255,0.05);
  padding: 20px;
  border-radius: 15px;
  border: 1px solid rgba(34,139,34,0.3);
}

.button-group {
  display: flex;
  gap: 10px;
  margin-bottom: 20px;
  flex-wrap: wrap;
}

.control-btn {
  flex: 1;
  padding: 12px 16px;
  border: none;
  border-radius: 8px;
  font-weight: bold;
  cursor: pointer;
  transition: all 0.3s ease;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  min-width: 80px;
}

.control-btn.primary {
  background: linear-gradient(135deg, var(--forest-green), var(--dark-green));
  color: var(--snow-white);
}

.control-btn.secondary {
  background: linear-gradient(135deg, var(--festive-red), var(--deep-red));
  color: var(--snow-white);
}

.control-btn:not(.primary):not(.secondary) {
  background: linear-gradient(135deg, var(--gold), var(--bright-gold));
  color: var(--night-blue);
}

.control-btn:hover:not(:disabled) {
  transform: translateY(-2px);
  box-shadow: 0 5px 15px rgba(0,0,0,0.3);
}

.control-btn:active:not(:disabled) {
  transform: translateY(0);
}

.control-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
}

.speed-control {
  display: flex;
  align-items: center;
  gap: 10px;
  flex-wrap: wrap;
}

.speed-control label {
  color: var(--snow-white);
  font-weight: bold;
  min-width: 100px;
}

#speed-slider {
  flex: 1;
  height: 6px;
  border-radius: 3px;
  background: rgba(255,255,255,0.3);
  outline: none;
  -webkit-appearance: none;
  min-width: 120px;
}

#speed-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 18px;
  height: 18px;
  border-radius: 50%;
  background: var(--gold);
  cursor: pointer;
  box-shadow: 0 2px 6px rgba(0,0,0,0.3);
  transition: all 0.3s ease;
}

#speed-slider::-webkit-slider-thumb:hover {
  background: var(--bright-gold);
  transform: scale(1.1);
}

#speed-value {
  color: var(--gold);
  font-weight: bold;
  min-width: 30px;
}

.status-section {
  background: rgba(255,255,255,0.05);
  padding: 15px;
  border-radius: 15px;
  border: 1px solid rgba(255,215,0,0.3);
  text-align: center;
}

.status-message {
  color: var(--snow-white);
  font-style: italic;
  line-height: 1.4;
  transition: all 0.3s ease;
}

.status-message.success {
  color: var(--forest-green);
  font-weight: bold;
}

.status-message.error {
  color: var(--festive-red);
  font-weight: bold;
}

@keyframes numberChange {
  0% { transform: translateY(0) scale(1); }
  50% { transform: translateY(-10px) scale(1.1); }
  100% { transform: translateY(0) scale(1); }
}

.number-change {
  animation: numberChange 0.5s ease;
}

@media (max-width: 1024px) {
  .app-layout {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  
  .control-panel {
    order: -1;
  }
  
  .countdown-display {
    gap: 15px;
  }
  
  .countdown-item {
    padding: 10px 15px;
  }
  
  .countdown-item span {
    font-size: 2rem;
  }
}

@media (max-width: 768px) {
  .main-container {
    padding: 15px;
  }
  
  .countdown-section h1 {
    font-size: 2rem;
  }
  
  .countdown-display {
    gap: 10px;
  }
  
  .countdown-item {
    padding: 8px 12px;
  }
  
  .countdown-item span {
    font-size: 1.5rem;
  }
  
  .button-group {
    flex-direction: column;
  }
  
  .speed-control {
    flex-direction: column;
    align-items: stretch;
  }
  
  .speed-control label {
    min-width: auto;
  }
}

---script.js---
// Journey data - Santa's route around the world
const journeyData = [
  { name: "North Pole", lat: 90, lng: 0, x: 500, y: 50 },
  { name: "Tokyo, Japan", lat: 35.6762, lng: 139.6503, x: 850, y: 180 },
  { name: "Sydney, Australia", lat: -33.8688, lng: 151.2093, x: 880, y: 350 },
  { name: "Mumbai, India", lat: 19.0760, lng: 72.8777, x: 720, y: 220 },
  { name: "Dubai, UAE", lat: 25.2048, lng: 55.2708, x: 680, y: 200 },
  { name: "Moscow, Russia", lat: 55.7558, lng: 37.6176, x: 620, y: 120 },
  { name: "London, UK", lat: 51.5074, lng: -0.1278, x: 480, y: 130 },
  { name: "Paris, France", lat: 48.8566, lng: 2.3522, x: 490, y: 140 },
  { name: "Rome, Italy", lat: 41.9028, lng: 12.4964, x: 510, y: 160 },
  { name: "Cairo, Egypt", lat: 30.0444, lng: 31.2357, x: 580, y: 190 },
  { name: "Cape Town, South Africa", lat: -33.9249, lng: 18.4241, x: 540, y: 380 },
  { name: "S√£o Paulo, Brazil", lat: -23.5505, lng: -46.6333, x: 320, y: 330 },
  { name: "Buenos Aires, Argentina", lat: -34.6118, lng: -58.3960, x: 300, y: 380 },
  { name: "Mexico City, Mexico", lat: 19.4326, lng: -99.1332, x: 200, y: 220 },
  { name: "Los Angeles, USA", lat: 34.0522, lng: -118.2437, x: 150, y: 180 },
  { name: "New York, USA", lat: 40.7128, lng: -74.0060, x: 280, y: 160 },
  { name: "Toronto, Canada", lat: 43.6532, lng: -79.3832, x: 260, y: 140 },
  { name: "Reykjavik, Iceland", lat: 64.1466, lng: -21.9426, x: 450, y: 100 },
  { name: "Stockholm, Sweden", lat: 59.3293, lng: 18.0686, x: 540, y: 110 },
  { name: "Beijing, China", lat: 39.9042, lng: 116.4074, x: 800, y: 160 },
  { name: "North Pole", lat: 90, lng: 0, x: 500, y: 50 }
];

// Game state
let currentCityIndex = 0;
let journeyProgress = 0;
let isJourneyActive = false;
let isPaused = false;
let animationId = null;
let speedMultiplier = 1;
let cityMarkers = [];
let lastUpdateTime = 0;
let journeyStartTime = null;

// DOM elements
let santaSleigh, progressFill, currentCitySpan, nextCitySpan, etaSpan, citiesVisitedSpan;
let startBtn, pauseBtn, resetBtn, speedSlider, speedValue, statusMessage;
let particlesContainer;

// Christmas countdown
function updateCountdown() {
  const now = new Date();
  const currentYear = now.getFullYear();
  let christmas = new Date(currentYear, 11, 24, 20, 0, 0); // Dec 24, 8 PM
  
  if (now > christmas) {
    christmas = new Date(currentYear + 1, 11, 24, 20, 0, 0);
  }
  
  const timeDiff = christmas - now;
  const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
  const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
  const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);
  
  updateCountdownDisplay('days', days);
  updateCountdownDisplay('hours', hours);
  updateCountdownDisplay('minutes', minutes);
  updateCountdownDisplay('seconds', seconds);
}

function updateCountdownDisplay(id, value) {
  const element = document.getElementById(id);
  const formattedValue = value.toString().padStart(2, '0');
  
  if (element.textContent !== formattedValue) {
    element.classList.add('number-change');
    element.textContent = formattedValue;
    setTimeout(() => element.classList.remove('number-change'), 500);
  }
}

// Create city markers
function createCityMarkers() {
  const mapContainer = document.getElementById('world-map');
  
  journeyData.forEach((city, index) => {
    if (index === journeyData.length - 1) return; // Skip duplicate North Pole
    
    const marker = document.createElement('div');
    marker.className = 'city-marker';
    marker.style.left = `${(city.x / 1000) * 100}%`;
    marker.style.top = `${(city.y / 500) * 100}%`;
    marker.title = city.name;
    
    mapContainer.appendChild(marker);
    cityMarkers.push(marker);
  });
}

// Update Santa's position
function updateSantaPosition(progress) {
  if (currentCityIndex >= journeyData.length - 1) return;
  
  const currentCity = journeyData[currentCityIndex];
  const nextCity = journeyData[currentCityIndex + 1];
  
  const x = currentCity.x + (nextCity.x - currentCity.x) * progress;
  const y = currentCity.y + (nextCity.y - currentCity.y) * progress;
  
  santaSleigh.style.left = `${(x / 1000) * 100}%`;
  santaSleigh.style.top = `${(y / 500) * 100}%`;
  
  // Create particle effects
  createParticleEffect(x, y);
  
  // Update map panning to follow Santa
  updateMapPanning(x, y);
}

// Create particle effects
function createParticleEffect(x, y) {
  if (Math.random() < 0.3) { // 30% chance per frame
    const particle = document.createElement('div');
    particle.className = 'particle';
    particle.style.left = `${(x / 1000) * 100}%`;
    particle.style.top = `${(y / 500) * 100}%`;
    
    // Add some randomness to particle position
    const offsetX = (Math.random() - 0.5) * 20;
    const offsetY = (Math.random() - 0.5) * 20;
    particle.style.transform = `translate(${offsetX}px, ${offsetY}px)`;
    
    particlesContainer.appendChild(particle);
    
    // Remove particle after animation
    setTimeout(() => {
      if (particle.parentNode) {
        particle.parentNode.removeChild(particle);
      }
    }, 1500);
  }
}

// Update map panning
function updateMapPanning(x, y) {
  const mapContainer = document.getElementById('world-map');
  const containerWidth = mapContainer.offsetWidth;
  const containerHeight = mapContainer.offsetHeight;
  
  // Calculate offset to center Santa
  const offsetX = Math.max(0, Math.min(containerWidth - 1000, (containerWidth / 2) - x));
  const offsetY = Math.max(0, Math.min(containerHeight - 500, (containerHeight / 2) - y));
  
  mapContainer.style.transform = `translate(${offsetX}px, ${offsetY}px)`;
}

// Update city highlights
function updateCityHighlights() {
  // Clear all highlights
  cityMarkers.forEach(marker => {
    marker.classList.remove('current-city-highlight', 'next-city-highlight');
  });
  
  // Highlight current and next cities
  if (currentCityIndex < cityMarkers.length) {
    cityMarkers[currentCityIndex].classList.add('current-city-highlight');
  }
  
  if (currentCityIndex + 1 < cityMarkers.length) {
    cityMarkers[currentCityIndex + 1].classList.add('next-city-highlight');
  }
}

// Update information panel
function updateInfoPanel() {
  const current = journeyData[currentCityIndex];
  const next = currentCityIndex + 1 < journeyData.length ? journeyData[currentCityIndex + 1] : null;
  
  currentCitySpan.textContent = current.name;
  nextCitySpan.textContent = next ? next.name : "Journey Complete!";
  citiesVisitedSpan.textContent = `${currentCityIndex} / ${journeyData.length - 1}`;
  
  // Calculate ETA
  if (isJourneyActive && journeyStartTime && next) {
    const elapsed = Date.now() - journeyStartTime;
    const totalEstimated = (elapsed / (currentCityIndex + journeyProgress)) * journeyData.length;
    const remaining = totalEstimated - elapsed;
    const eta = new Date(Date.now() + remaining);
    etaSpan.textContent = eta.toLocaleTimeString();
  } else {
    etaSpan.textContent = "--:--";
  }
}

// Animation loop
function animateJourney(currentTime) {
  if (!isJourneyActive || isPaused) return;
  
  if (!lastUpdateTime) lastUpdateTime = currentTime;
  const deltaTime = currentTime - lastUpdateTime;
  lastUpdateTime = currentTime;
  
  // Update journey progress
  const baseSpeed = 0.001; // Base speed
  journeyProgress += (baseSpeed * speedMultiplier * deltaTime);
  
  if (journeyProgress >= 1) {
    // Move to next city
    journeyProgress = 0;
    currentCityIndex++;
    
    if (currentCityIndex >= journeyData.length - 1) {
      // Journey complete
      completeJourney();
      return;
    }
    
    updateCityHighlights();
  }
  
  // Update Santa position
  updateSantaPosition(journeyProgress);
  
  // Update progress bar
  const overallProgress = (currentCityIndex + journeyProgress) / (journeyData.length - 1);
  progressFill.style.width = `${overallProgress * 100}%`;
  
  // Update info panel
  updateInfoPanel();
  
  animationId = requestAnimationFrame(animateJourney);
}

// Start journey
function startJourney() {
  if (isJourneyActive && !isPaused) return;
  
  if (isPaused) {
    // Resume
    isPaused = false;
    lastUpdateTime = 0;
    animationId = requestAnimationFrame(animateJourney);
    startBtn.textContent = "Start Journey";
    pauseBtn.disabled = false;
    statusMessage.textContent = "Journey resumed! Santa is back on his way!";
  } else {
    // Start new journey
    isJourneyActive = true;
    isPaused = false;
    journeyStartTime = Date.now();
    lastUpdateTime = 0;
    
    updateCityHighlights();
    animationId = requestAnimationFrame(animateJourney);
    
    startBtn.disabled = true;
    pauseBtn.disabled = false;
    statusMessage.textContent = "Ho ho ho! Santa has begun his magical journey!";
    statusMessage.className = "status-message success";
  }
}

// Pause journey
function pauseJourney() {
  if (!isJourneyActive || isPaused) return;
  
  isPaused = true;
  if (animationId) {
    cancelAnimationFrame(animationId);
    animationId = null;
  }
  
  startBtn.disabled = false;
  startBtn.textContent = "Resume";
  pauseBtn.disabled = true;
  statusMessage.textContent = "Journey paused. Santa is taking a quick break!";
  statusMessage.className = "status-message";
}

// Reset journey
function resetJourney() {
  isJourneyActive = false;
  isPaused = false;
  currentCityIndex = 0;
  journeyProgress = 0;
  journeyStartTime = null;
  lastUpdateTime = 0;
  
  if (animationId) {
    cancelAnimationFrame(animationId);
    animationId = null;
  }
  
  // Reset UI
  startBtn.disabled = false;
  startBtn.textContent = "Start Journey";
  pauseBtn.disabled = true;
  progressFill.style.width = "0%";
  
  // Reset Santa position
  updateSantaPosition(0);
  updateCityHighlights();
  updateInfoPanel();
  
  // Clear particles
  particlesContainer.innerHTML = '';
  
  statusMessage.textContent = "Ready to begin the magical journey!";
  statusMessage.className = "status-message";
}

// Complete journey
function completeJourney() {
  isJourneyActive = false;
  progressFill.style.width = "100%";
  
  startBtn.disabled = true;
  pauseBtn.disabled = true;
  
  statusMessage.textContent = "üéâ Journey Complete! All gifts have been delivered! Merry Christmas! üéÑ";
  statusMessage.className = "status-message success";
  
  // Clear all city highlights
  cityMarkers.forEach(marker => {
    marker.classList.remove('current-city-highlight', 'next-city-highlight');
  });
  
  updateInfoPanel();
}

// Speed control
function updateSpeed() {
  speedMultiplier = parseFloat(speedSlider.value);
  speedValue.textContent = `${speedMultiplier}x`;
  
  // Save to localStorage
  localStorage.setItem('santaJourneySpeed', speedMultiplier);
}

// Load saved preferences
function loadPreferences() {
  const savedSpeed = localStorage.getItem('santaJourneySpeed');
  if (savedSpeed) {
    speedMultiplier = parseFloat(savedSpeed);
    speedSlider.value = speedMultiplier;
    speedValue.textContent = `${speedMultiplier}x`;
  }
}

// Initialize the application
function init() {
  // Get DOM elements
  santaSleigh = document.getElementById('santa-sleigh');
  progressFill = document.getElementById('progress-fill');
  currentCitySpan = document.getElementById('current-city');
  nextCitySpan = document.getElementById('next-city');
  etaSpan = document.getElementById('eta');
  citiesVisitedSpan = document.getElementById('cities-visited');
  startBtn = document.getElementById('start-btn');
  pauseBtn = document.getElementById('pause-btn');
  resetBtn = document.getElementById('reset-btn');
  speedSlider = document.getElementById('speed-slider');
  speedValue = document.getElementById('speed-value');
  statusMessage = document.getElementById('journey-status');
  particlesContainer = document.getElementById('santa-particles');
  
  // Create city markers
  createCityMarkers();
  
  // Set initial state
  updateSantaPosition(0);
  updateCityHighlights();
  updateInfoPanel();
  
  // Load preferences
  loadPreferences();
  
  // Event listeners
  startBtn.addEventListener('click', startJourney);
  pauseBtn.addEventListener('click', pauseJourney);
  resetBtn.addEventListener('click', resetJourney);
  speedSlider.addEventListener('input', updateSpeed);
  
  // Start countdown
  updateCountdown();
  setInterval(updateCountdown, 1000);
  
  console.log("üéÖ Santa's Global Gift Dash initialized!");
}

// Initialize when DOM is ready
init();