{
  "description": "A static web application that serves as a personal music discovery companion, presenting users with a single, curated 'lesser known' album recommendation. Users can delve into album details, mark an album as completed after a full listen, and unlock new suggestions. The app tracks listening progress and maintains a history of completed albums, all saved locally to provide a persistent, personalized experience.",
  "features": [
    "Dynamic Album Display: Presents a single album with cover art, title, artist, genre, and a brief description.",
    "Listen Link: Provides a clickable link (e.g., Spotify/YouTube) to stream the recommended album externally.",
    "\"Mark as Listened\" Action: Allows users to mark the current album as completed, triggering the display of a new recommendation.",
    "Progress Tracking: Displays the total number of albums listened to by the user as a persistent counter.",
    "Local Storage Persistence: Saves listening progress, completed album IDs, and the current recommendation state across browser sessions.",
    "Curated Album Pool: Manages a predefined, internal list of 'lesser known' albums to be recommended.",
    "Smart Recommendation Logic: Selects a new, unlistened album from the pool, ensuring all unique albums are presented before cycling through listened ones.",
    "\"Skip Album\" Functionality: Allows users to skip the current recommendation without marking it as listened, making it reappear later if no other unlistened albums exist.",
    "Listened History Display: Shows a scrollable sidebar with a chronological list of all albums previously marked as listened, including their basic details.",
    "\"Reset Progress\" Option: Provides a clear button to wipe all local listening data and reset the app to its initial state.",
    "Responsive UI (Container-based): Ensures the application layout adjusts gracefully within its parent container for various screen sizes.",
    "Informative Empty States: Displays clear messages for situations like 'No albums listened yet' or 'All albums listened through'."
  ],
  "ui_polish": [
    "Album Card Transition: When an album is marked as listened or skipped, the main album card performs a smooth, engaging slide or 3D flip transition to reveal the next recommendation.",
    "Interactive Button Hover & Click Effects: All interactive buttons feature subtle scale-up or color-shift animations on hover, coupled with a satisfying 'press' feedback on click.",
    "Dynamic Background Gradient: A subtle, slowly animating background gradient or ambient visual effect that gently shifts colors or intensity, creating an immersive mood.",
    "\"Listened\" Streak Animation: A small, celebratory particle burst or counter animation appears when an album is marked as listened, visually confirming the progress update.",
    "Custom Scrollbar & Entry Fade-in: The history sidebar features a custom-styled, sleek scrollbar, and new history entries subtly fade-in with a short delay when added."
  ],
  "steps": [
    "1. **Project Setup & Basic HTML Structure:**",
    "   - Create `index.html`, `style.css`, and `script.js` files.",
    "   - In `index.html`, establish the main container (`<div id='app'>`).",
    "   - Inside `#app`, add a header (`<h1>Album Recs</h1>`, `<span id='progress-counter'>`), a main content area (`<div id='main-content'>`), and a history sidebar (`<aside id='history-sidebar'>`).",
    "   - Inside `#main-content`, create the album card (`<div id='album-card'>`) containing: `<img id='album-cover' alt='Album Cover'>`, `<h2 id='album-title'></h2>`, `<h3 id='album-artist'></h3>`, `<p id='album-genre'></p>`, `<p id='album-description'></p>`, `<a id='listen-link' href='#' target='_blank'>Listen Now</a>`.",
    "   - Below the album card, add a controls section (`<div id='controls'>`) with buttons: `<button id='mark-listened'>Mark as Listened</button>`, `<button id='skip-album'>Skip Album</button>`, `<button id='reset-progress'>Reset Progress</button>`.",
    "   - Inside `#history-sidebar`, add a heading (`<h2>Listen History</h2>`) and an unordered list (`<ul id='history-list'></ul>`).",
    "2. **Base CSS Styling & Layout:**",
    "   - Apply a modern, clean design using CSS variables for a consistent color scheme.",
    "   - Use Flexbox for `#app` to arrange `#main-content` and `#history-sidebar` side-by-side.",
    "   - Style `#album-card` with `box-shadow`, `border-radius`, `padding`, and `margin: auto` for centering.",
    "   - Style buttons: consistent `background-color`, `color`, `padding`, `border-radius`, `cursor: pointer`.",
    "   - Style `#history-sidebar`: fixed `width` (e.g., `300px`), `overflow-y: auto`, distinct `background-color`, `padding`.",
    "   - Implement initial UI polish:",
    "     - **Interactive Button Hover Effects**: Add `transition` properties to buttons and `transform: translateY(-2px);` or `box-shadow` changes on `:hover`.",
    "     - **Custom Scrollbar**: Style `::-webkit-scrollbar`, `::-webkit-scrollbar-track`, and `::-webkit-scrollbar-thumb` for `#history-sidebar`.",
    "     - Set up a basic `transition: all 0.5s ease-in-out;` on `#album-card` for initial animation capability.",
    "3. **JavaScript Data & Local Storage Management:**",
    "   - In `script.js`, define a `const ALBUMS` array. Each object should have `id`, `title`, `artist`, `genre`, `description`, `cover` (URL), and `listenUrl` properties. Populate with at least 10 diverse albums.",
    "   - Initialize a `let state` object: `{ currentAlbumId: null, listenedAlbumIds: [], allAlbumsPlayed: false }`.",
    "   - Create `loadState()` function: Retrieve state from `localStorage.getItem('albumApp_state')`. If null, initialize `state` to default values. Parse JSON.",
    "   - Create `saveState()` function: Stringify `state` and `localStorage.setItem('albumApp_state', JSON.stringify(state))`.",
    "   - Call `loadState()` on `DOMContentLoaded`.",
    "4. **Core Recommendation & Display Logic:**",
    "   - Create `getAlbumById(id)` helper function to find an album in `ALBUMS` by its `id`.",
    "   - Create `selectNextAlbumId(isSkipping = false)` function:",
    "     - Filter `ALBUMS` to find `unplayedAlbums` (those whose `id` is not in `state.listenedAlbumIds`).",
    "     - If `unplayedAlbums` exist:",
    "       - If `isSkipping` and there's more than one `unplayedAlbum`, ensure the *current* album isn't re-selected immediately (e.g., filter it out temporarily for the selection).",
    "       - Select a random album `id` from `unplayedAlbums`.",
    "       - Set `state.allAlbumsPlayed = false`.",
    "     - Else (all unique albums played):",
    "       - Select a random album `id` from *all* `ALBUMS`.",
    "       - Set `state.allAlbumsPlayed = true`.",
    "     - Update `state.currentAlbumId` and `saveState()`.",
    "     - Return the selected `albumId`.",
    "   - Create `renderAlbumCard(albumId)` function:",
    "     - Get album data using `getAlbumById(albumId)`.",
    "     - Update `img#album-cover.src`, `alt`.",
    "     - Update `h2#album-title.textContent`, `h3#album-artist.textContent`, `p#album-genre.textContent`, `p#album-description.textContent`.",
    "     - Update `a#listen-link.href` and `textContent`.",
    "     - If `state.allAlbumsPlayed` is true, add a message to the description area indicating cycling.",
    "   - Create `updateProgressCounter()`: Set `span#progress-counter.textContent` to `state.listenedAlbumIds.length`.",
    "   - On `DOMContentLoaded`, after `loadState()`:",
    "     - If `state.currentAlbumId` is null, call `selectNextAlbumId()`.",
    "     - Call `renderAlbumCard(state.currentAlbumId)` and `updateProgressCounter()`.",
    "5. **User Interaction Logic & History Display:**",
    "   - Create `addAlbumToHistoryList(album)` function:",
    "     - Create a new `<li>` element. Add classes for fade-in effect.",
    "     - Populate `<li>` with `album.title` and `album.artist`.",
    "     - Prepend `<li>` to `ul#history-list`. (Use `setTimeout` to trigger fade-in CSS class after element is added).",
    "   - Create `renderHistory()` function:",
    "     - Clear `ul#history-list.innerHTML`.",
    "     - If `state.listenedAlbumIds` is empty, display an `<li>` with 'No albums listened yet!'.",
    "     - Else, iterate `state.listenedAlbumIds` (in reverse order for newest first), get album details with `getAlbumById()`, and call `addAlbumToHistoryList()` for each.",
    "   - Call `renderHistory()` on `DOMContentLoaded`.",
    "   - **`markAsListened()` function (event handler for `#mark-listened`):**",
    "     - Get `currentAlbumId` from `state`.",
    "     - If `currentAlbumId` is not in `state.listenedAlbumIds`, add it.",
    "     - Trigger UI polish: **\"Listened\" Streak Animation** (add/remove temporary CSS class to `span#progress-counter` for scaling/color change, or dynamically create a small `+1` element that floats up and fades out).",
    "     - Call `saveState()`.",
    "     - Call `addAlbumToHistoryList(getAlbumById(currentAlbumId))`.",
    "     - Call `updateProgressCounter()`.",
    "     - Initiate **Album Card Transition** (see step 7.1).",
    "     - After transition completes, call `selectNextAlbumId()` and `renderAlbumCard(state.currentAlbumId)`.",
    "   - **`skipAlbum()` function (event handler for `#skip-album`):**",
    "     - Initiate **Album Card Transition** (see step 7.1, but use a distinct animation class).",
    "     - After transition completes, call `selectNextAlbumId(true)` and `renderAlbumCard(state.currentAlbumId)`.",
    "   - Attach event listeners for `click` to `#mark-listened` and `#skip-album` buttons.",
    "6. **\"Reset Progress\" & Edge Cases:**",
    "   - **`resetProgress()` function (event handler for `#reset-progress`):**",
    "     - Show a `confirm()` dialog: 'Are you sure you want to reset all your listening progress?'",
    "     - If confirmed:",
    "       - `localStorage.removeItem('albumApp_state')`.",
    "       - Reload the page: `window.location.reload()` (simplest way to reset all JS state and UI).",
    "   - Attach event listener for `click` to `#reset-progress` button.",
    "   - **Empty States**: Ensure `renderHistory()` displays 'No albums listened yet!' when `state.listenedAlbumIds` is empty. Ensure `renderAlbumCard` displays specific message if `state.allAlbumsPlayed` is true.",
    "7. **Advanced UI Polish & Refinements:**",
    "   - **Album Card Transition (detailed):**",
    "     - Define CSS classes for transition stages on `#album-card`: `.is-leaving` (e.g., `transform: translateX(-100%)`, `opacity: 0`), `.is-entering` (e.g., `transform: translateX(100%)`, `opacity: 0`), `.is-active` (default state). Add `transition` properties to these classes.",
    "     - For 'Mark as Listened' (or Skip):",
    "       - Add `.is-leaving` class to `#album-card` (or trigger 3D flip using `transform: rotateY(90deg)`).",
    "       - After a short `setTimeout` (matching transition duration): remove `.is-leaving`, update album content, add `.is-entering`.",
    "       - After another short `setTimeout`: remove `.is-entering` to return to default/active state.",
    "     - For a 3D flip, wrap album content in an inner div with `backface-visibility: hidden` and rotate the outer card, then swap inner content on the 'back' phase.",
    "   - **Dynamic Background Gradient:**",
    "     - In `style.css`, apply a `linear-gradient` to `body` or `#app`. Use `background-size: 400% 400%;` and CSS `@keyframes` for a `gradientAnimation` that shifts `background-position` over 15-30 seconds, `ease infinite`.",
    "   - **\"Listened\" Streak Animation (detailed):**",
    "     - When `markAsListened` occurs, dynamically create a `div` element with text `+1` (or similar). Style it with `position: absolute`, `opacity: 1`, `font-size: 1.5em`. Append it near `progress-counter`.",
    "     - Use CSS `@keyframes` (or JS `animate()`) to make this `div` `transform: translateY(-20px);` and `opacity: 0;` over 1 second, then remove it from DOM.",
    "   - **History Entry Fade-in:**",
    "     - Define CSS class `.history-item-entering` with `opacity: 0; transform: translateY(10px);` and `transition: opacity 0.3s ease, transform 0.3s ease;`.",
    "     - When adding a new `li` in `addAlbumToHistoryList()`, first add it with `history-item-entering`, then use `requestAnimationFrame` or `setTimeout(0)` to remove the class, allowing CSS transition to take effect."
  ],
  "dependencies": [
    "None (vanilla HTML, CSS, JavaScript)"
  ]
}