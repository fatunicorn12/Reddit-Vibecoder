{
  "description": "A static HTML/CSS/JS web application that simulates a real-time social media stream based on a user-defined complaint topic. The app generates posts from various 'bot' profiles, each post contributing to virtual 'cost' and 'impact' meters, providing a dynamic visualization of public sentiment and its simulated effects.",
  "features": [
    "User input field for a custom complaint topic.",
    "Dynamic generation of social media posts at regular intervals.",
    "Multiple 'bot' profiles with distinct names/personas.",
    "Posts incorporate the user's topic and varied sentiments.",
    "Virtual 'Cost' meter that incrementally increases with each post.",
    "Virtual 'Impact' meter that incrementally increases with each post.",
    "A scrollable display area for the simulated social media feed.",
    "Basic, clean user interface (HTML/CSS)."
  ],
  "steps": [
    "**1. Project Setup:** Create `index.html`, `style.css`, and `script.js` files in the same directory.",
    "**2. HTML Structure (`index.html`):**",
    "   - Add basic HTML5 boilerplate (`<!DOCTYPE html>`, `<html>`, `<head>`, `<body>`).",
    "   - Link `style.css` in the `<head>` section.",
    "   - Inside `<body>`:",
    "     - Create a header (e.g., `<h1>`) for the application title.",
    "     - Add an input field (`<input type=\"text\" id=\"complaintTopic\" placeholder=\"Enter complaint topic...\">`).",
    "     - Add a button (`<button id=\"startButton\">Start Simulation</button>`).",
    "     - Create `div` elements to display the meters: `<div id=\"meters\">Cost: <span id=\"costMeter\">0</span> | Impact: <span id=\"impactMeter\">0.00</span></div>`.",
    "     - Create a container `div` for the social media posts: `<div id=\"postStream\"></div>`.",
    "     - Link `script.js` at the end of the `<body>` tag, just before `</body>`.",
    "**3. CSS Styling (`style.css`):**",
    "   - Apply basic styling for overall page layout, font-sizes, and colors.",
    "   - Style the input field, button, and meter displays for readability.",
    "   - Set a fixed height and `overflow-y: scroll;` for `#postStream` to make it a scrollable feed.",
    "   - Define a class `.social-post` for individual post elements (e.g., border, padding, margin, background color) to distinguish them.",
    "**4. JavaScript Core Logic (`script.js`):**",
    "   - **A. Global Variables & DOM References:**",
    "     - Declare `let cost = 0;` and `let impact = 0;`.",
    "     - Declare `let postIntervalId;` to store the ID of the `setInterval` timer.",
    "     - Get references to the HTML elements: `complaintTopicInput`, `startButton`, `costMeterDisplay`, `impactMeterDisplay`, `postStreamContainer`.",
    "     - Define an array `BOT_PROFILES` (e.g., `[{ name: 'ConcernedCitizen', sentiment: 'negative' }, { name: 'NeutralObserver', sentiment: 'neutral' }, { name: 'SupportiveVoice', sentiment: 'positive' }]`).",
    "     - Define an array `PHRASE_TEMPLATES` with various strings that include a `[TOPIC]` placeholder (e.g., `['I can't believe [TOPIC] is still an issue!', 'Someone needs to address [TOPIC] immediately.', 'My thoughts on [TOPIC]: it's getting worse.', 'Finally, someone is talking about [TOPIC].']`).",
    "   - **B. `updateMetersDisplay()` Function:**",
    "     - Create a function to update the `textContent` of `costMeterDisplay` and `impactMeterDisplay` with the current `cost` and `impact` values (formatted for impact, e.g., to 2 decimal places).",
    "   - **C. `generateAndDisplayPost()` Function:**",
    "     - Randomly select a bot profile from `BOT_PROFILES`.",
    "     - Randomly select a phrase template from `PHRASE_TEMPLATES`.",
    "     - Replace `[TOPIC]` in the selected phrase with the current value of `complaintTopicInput.value`.",
    "     - Generate random `postCost` (e.g., 5-20) and `postImpact` (e.g., 0.05-0.25) values for the current post.",
    "     - Add `postCost` to `cost` and `postImpact` to `impact`.",
    "     - Create a new `div` element for the post (`document.createElement('div')`).",
    "     - Add the class `social-post` to this new `div`.",
    "     - Set the `innerHTML` of the post `div` to include the bot's name, the generated post text, and a simulated timestamp (e.g., `new Date().toLocaleTimeString()`).",
    "     - Prepend the new post `div` to `postStreamContainer` (`postStreamContainer.prepend(newPostDiv);`) to show the newest posts at the top.",
    "     - Call `updateMetersDisplay()` to refresh the meter values.",
    "   - **D. `startSimulation()` Function:**",
    "     - Clear any existing `postIntervalId` using `clearInterval()` to prevent multiple simulations running.",
    "     - Reset `cost = 0;` and `impact = 0;`.",
    "     - Call `updateMetersDisplay()` to show initial zero values.",
    "     - Disable `complaintTopicInput` and `startButton` to prevent changes during simulation.",
    "     - Clear the `postStreamContainer.innerHTML` to remove previous posts.",
    "     - Set `postIntervalId = setInterval(generateAndDisplayPost, 2500);` (e.g., to generate a post every 2.5 seconds).",
    "   - **E. Event Listener:**",
    "     - Add an event listener to `startButton` that calls `startSimulation()` when clicked."
  ],
  "dependencies": []
}