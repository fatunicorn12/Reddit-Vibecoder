{
  "description": "A simple browser-based game where players quickly classify generated text snippets as 'Acceptable' or 'Violates Rule' based on embedded keywords. The goal is to achieve the highest score before a timer expires, with difficulty increasing as the game progresses.",
  "features": [
    "Display of incoming random text snippets.",
    "Interactive buttons for 'Acceptable' and 'Violates Rule' classification.",
    "Real-time scoring: +1 for correct, -1 for incorrect classification.",
    "Countdown game timer.",
    "Dynamic difficulty: increased probability of rule-violating snippets as score rises.",
    "Display of current score and a persistent high score (using browser's localStorage).",
    "Clear game over state with final score, high score, and a restart option."
  ],
  "steps": [
    "**1. HTML Structure (index.html):**",
    "   - Create a main container (`div`) for the game.",
    "   - Add an element (`h2` or `div`) to display the current text snippet.",
    "   - Include separate elements (`span` or `div`) for displaying the current score, time left, and high score.",
    "   - Add two buttons: 'Acceptable' and 'Violates Rule', with unique IDs.",
    "   - Create a game over overlay (`div`) initially hidden, containing the final score, high score, and a 'Play Again' button.",
    "   - Link `style.css` and `script.js`.",
    "**2. CSS Styling (style.css):**",
    "   - Implement basic styling for game layout, buttons, text elements, and score displays.",
    "   - Style the game over overlay to appear centered and cover the game area when active.",
    "   - Ensure responsiveness for basic readability.",
    "**3. JavaScript Logic (script.js):**",
    "   - **Global Variables & DOM References:** Initialize `score`, `timeLeft`, `highScore` (load from `localStorage`), `gameRunning` flag, `timerIntervalId`, `currentSnippetObject` (to store text and its `expectedClassification`). Get references to all necessary HTML elements.",
    "   - **Game Configuration:** Define arrays for `BAD_KEYWORDS` (e.g., `['spam', 'scam', 'hate', 'abuse']`) and `GOOD_WORDS` to construct snippets. Set `GAME_DURATION` (e.g., 60 seconds) and `INITIAL_VIOLATION_CHANCE` (e.g., 0.3).",
    "   - **`generateSnippet()` Function:**",
    "     - Randomly decide if the snippet will violate a rule, adjusting the probability based on `score` (e.g., `INITIAL_VIOLATION_CHANCE + score * 0.01`).",
    "     - Construct a sentence:",
    "       - If violating: embed a random `BAD_KEYWORD` within random `GOOD_WORDS`. Set `currentSnippetObject.expectedClassification = 'Violates Rule'`.",
    "       - If acceptable: use only `GOOD_WORDS`. Set `currentSnippetObject.expectedClassification = 'Acceptable'`.",
    "     - Update the snippet display element with the generated text.",
    "   - **`handlePlayerChoice(choice)` Function:**",
    "     - If `gameRunning` is false, ignore input.",
    "     - Compare `choice` with `currentSnippetObject.expectedClassification`.",
    "     - If correct: `score++`.",
    "     - If incorrect: `score--` (ensure `score` doesn't go below 0 if desired).",
    "     - Update the score display.",
    "     - Call `generateSnippet()` to present the next challenge.",
    "   - **`updateTimer()` Function:**",
    "     - Decrement `timeLeft`. Update the timer display.",
    "     - If `timeLeft <= 0`, clear `timerIntervalId` and call `endGame()`.",
    "   - **`startGame()` Function:**",
    "     - Reset `score` to 0, `timeLeft` to `GAME_DURATION`.",
    "     - Load `highScore` from `localStorage` or initialize to 0.",
    "     - Hide the game over overlay and show the game elements.",
    "     - Set `gameRunning = true`.",
    "     - Start `timerIntervalId = setInterval(updateTimer, 1000)`.",
    "     - Call `generateSnippet()` to show the first snippet.",
    "   - **`endGame()` Function:**",
    "     - Clear `timerIntervalId`.",
    "     - Set `gameRunning = false`.",
    "     - If `score > highScore`, update `highScore` and save it to `localStorage`.",
    "     - Display the game over overlay, showing the final score and high score.",
    "     - Make the 'Play Again' button visible and clickable.",
    "   - **Event Listeners:**",
    "     - Attach `handlePlayerChoice('Acceptable')` to the 'Acceptable' button's click event.",
    "     - Attach `handlePlayerChoice('Violates Rule')` to the 'Violates Rule' button's click event.",
    "     - Attach `startGame()` to the 'Play Again' button's click event.",
    "   - **Initialization:** Call `startGame()` once when the script loads to begin the first game session."
  ],
  "dependencies": [
    "None (standard browser APIs: HTML, CSS, JavaScript, localStorage)"
  ]
}