{
  "description": "A web-based arcade game where players click a moving 'spark' element at the precise moment to maintain an electric connection and build the longest streak, before the spark fades or they click outside it.",
  "features": [
    "Interactive game area with a dynamically moving 'spark' element.",
    "Click detection on the 'spark' for scoring and interaction.",
    "Real-time display of the player's current successful click streak.",
    "Persistent high score tracking, saved and loaded using browser's local storage.",
    "Dynamic difficulty scaling: the spark's movement speed increases and its on-screen duration ('fade time') decreases as the streak progresses.",
    "Clear loss conditions: the game ends if the player clicks anywhere other than the 'spark', or if the 'spark' fades before being successfully clicked.",
    "A clean game over screen displaying final score and a 'Restart Game' option.",
    "Procedural gameplay design ensuring endless replayability and skill-based progression."
  ],
  "steps": [
    "**HTML Structure (index.html):**",
    "  - Create a basic HTML5 document with a `<!DOCTYPE html>` declaration and standard `head`/`body` tags.",
    "  - Inside the `<body>`, add a main `div` element with an ID (e.g., `game-area`) to serve as the game canvas/container. Set its initial size via CSS.",
    "  - Within `#game-area`, create a `div` element with an ID (e.g., `spark`) to represent the clickable spark. This will be absolutely positioned by JavaScript.",
    "  - Add separate `div` elements with IDs (e.g., `current-score`, `high-score`) to display the current streak and the session's high score.",
    "  - Create a `div` element with an ID (e.g., `game-over-screen`) that will be hidden by default. Inside it, include a game-over message, the final score, and a `button` with an ID (e.g., `restart-button`) to restart the game.",
    "  - Link `style.css` in the `<head>` and `script.js` at the end of the `<body>` tag.",
    "**CSS Styling (style.css):**",
    "  - Style the `body` for basic layout (e.g., `margin: 0`, `display: flex`, `justify-content: center`, `align-items: center`, `min-height: 100vh`).",
    "  - Style `#game-area`: Set a fixed `width`, `height`, `border`, `background-color`, `position: relative`, and `overflow: hidden` to contain the spark.",
    "  - Style `#spark`: Define its dimensions (e.g., `width`, `height`), `border-radius: 50%` to make it circular, a distinct `background-color`, `position: absolute` (crucial for JS movement), and `cursor: pointer`.",
    "  - Style the score displays (e.g., `font-size`, `color`, `position: absolute` for overlaying on the game area).",
    "  - Style `#game-over-screen`: Center its content, set `background-color`, `position: absolute` to overlay the game area, `display: none` initially, `font-size`, etc.",
    "  - Style `#restart-button`: Add basic button styling.",
    "**JavaScript Logic (script.js):**",
    "  - **DOM Element References:** Get references to `gameArea`, `spark`, `currentScoreDisplay`, `highScoreDisplay`, `gameOverScreen`, and `restartButton`.",
    "  - **Game State Variables:** Declare and initialize variables for `currentStreak = 0`, `highScore = localStorage.getItem('highScore') || 0`, `sparkX`, `sparkY`, `sparkDX`, `sparkDY` (for velocity), `sparkSize`, `sparkFadeTimeoutId`, `animationFrameId`, `sparkFadeDuration`.",
    "  - **`initGame()` Function:**",
    "    - Reset `currentStreak` to `0`.",
    "    - Reset `sparkDX` and `sparkDY` to initial slow values.",
    "    - Hide `gameOverScreen` and ensure `spark` is visible.",
    "    - Update score displays with current values.",
    "    - Call `resetSpark()` to place the spark randomly and start its fade timer.",
    "    - Start the `gameLoop()` using `requestAnimationFrame`.",
    "  - **`gameLoop()` Function:**",
    "    - Update `sparkX` and `sparkY` based on `sparkDX` and `sparkDY`.",
    "    - Implement boundary collision detection for `spark`: if `spark` hits `gameArea` edges, reverse `sparkDX` or `sparkDY`.",
    "    - Update the `spark` element's `left` and `top` CSS properties to reflect its new position.",
    "    - Store the `requestAnimationFrame` ID in `animationFrameId` and call `requestAnimationFrame(gameLoop)` for continuous animation.",
    "  - **`resetSpark()` Function:**",
    "    - If `sparkFadeTimeoutId` is active, clear it using `clearTimeout()`.",
    "    - Generate new random `sparkX`, `sparkY` coordinates within the `gameArea` bounds.",
    "    - Immediately update the `spark` element's CSS `left` and `top` to its new position.",
    "    - Calculate `sparkFadeDuration`: Decrease this value as `currentStreak` increases to scale difficulty (e.g., `initialDuration - (currentStreak * difficultyScalingFactor)`).",
    "    - Set `sparkFadeTimeoutId = setTimeout(gameOver, sparkFadeDuration)`.",
    "  - **Event Listeners:**",
    "    - Attach a `click` event listener to `spark` that calls `onSparkClick()`:",
    "      - Increment `currentStreak`.",
    "      - Update `highScore` if `currentStreak` is greater.",
    "      - Update `currentScoreDisplay` and `highScoreDisplay`.",
    "      - Increase `sparkDX` and `sparkDY` values slightly to increase spark speed (difficulty scaling).",
    "      - Call `resetSpark()` to reposition the spark and reset its fade timer.",
    "    - Attach a `click` event listener to `gameArea` that calls `onGameAreaClick(event)`:",
    "      - Inside `onGameAreaClick`, `if (event.target !== spark)` then call `gameOver()` (this handles clicking outside the spark).",
    "    - Attach a `click` event listener to `restartButton` that calls `initGame()`.",
    "  - **`gameOver()` Function:**",
    "    - Stop the `gameLoop` by calling `cancelAnimationFrame(animationFrameId)`.",
    "    - Clear any active `sparkFadeTimeoutId`.",
    "    - Display `gameOverScreen` and update its message with the final score.",
    "    - Save the final `highScore` to `localStorage.setItem('highScore', highScore)`.",
    "  - **Initial Call:** Call `initGame()` once when `script.js` loads to begin the game."
  ],
  "dependencies": []
}