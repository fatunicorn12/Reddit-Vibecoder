{
  "title": "SkillPath Explorer",
  "description": "A static web app for discovering transferable skills from non-traditional life experiences, generating ready-to-use resume bullet points, and personalizing a skill portfolio.",
  "features": [
    "Interactive Experience Selection: Users select from a predefined, diverse list of non-traditional experiences (e.g., caregiving, volunteering, freelance projects).",
    "Dynamic Skill Display: Instantly shows a curated, de-duplicated list of transferable skills relevant to the currently selected experiences.",
    "Example Resume Bullet Points: Provides specific, actionable resume bullet points for each displayed skill, demonstrating real-world application.",
    "Multi-Experience Aggregation: Allows selection of multiple experiences to combine and intelligently de-duplicate skills for a holistic view.",
    "Skill Categorization & Filtering: Skills are grouped by type (e.g., Communication, Problem-Solving, Technical, Leadership) with interactive filters.",
    "Search Functionality: Enables quick keyword search across available experiences.",
    "My Skill Snapshot (localStorage): Users can save their current selection of experiences, skills, and bullets for later review and re-loading.",
    "Custom Experience Submission (localStorage): Users can input a new, unique experience and define associated skills/bullets, which are stored locally and become selectable.",
    "Export Functionality: Download currently displayed skills and bullet points as a plain text file or simple HTML document.",
    "Skill Definition Tooltips: Hovering over any displayed skill reveals a concise definition or explanation of that skill.",
    "Responsive UI: Adapts layout and component sizing for an optimal viewing experience across various desktop browser window sizes.",
    "Clear Onboarding & Help Section: Provides initial instructions, usage tips, and an FAQ accessible via a dedicated section."
  ],
  "ui_polish": [
    "Animated Skill & Bullet Point Reveal: Smooth fade-in and subtle slide-up animations for new skills and bullet points as they appear in the display area.",
    "Interactive Hover States: Distinct visual feedback (e.g., subtle glow, slight scale, background color change) for clickable experience cards, skill tags, and action buttons.",
    "Themed Color Palette & Typography: A consistent, modern color scheme and professional font selection for a visually appealing and cohesive user interface.",
    "Visual Feedback for Actions: Confirmation toast messages (e.g., 'Saved to My Skill Snapshot!', 'Experience Added!') with a gentle bounce or fade animation upon successful user actions.",
    "Dynamic Layout Transitions: Graceful width/height transitions when sections expand, collapse, or when content areas are dynamically resized."
  ],
  "steps": [
    "1. Project Setup: Create `index.html`, `style.css`, and `script.js` files. Link CSS and JS to HTML. Set up basic HTML structure with main content areas (experience selection, skill display, control panel, modals).",
    "2. Static Data Definition: In `script.js`, define a `const experiencesData` array. Each object in the array represents an experience with properties like `id`, `name`, `description`, `category`, and an array of `skills`. Each `skill` object has `name`, `category`, `description`, and an array of `bullets` (strings). Also define a `const skillCategories` array.",
    "3. Core UI Elements (HTML & Initial JS Render):",
    "   a. Experience Selection Area: Create a container for experience cards/checkboxes. Use `script.js` to dynamically generate these from `experiencesData` on page load.",
    "   b. Search Input: Add an `<input type='text'>` for searching experiences.",
    "   c. Skill Category Filters: Generate buttons/checkboxes for each `skillCategory`.",
    "   d. Main Display Area: Create sections for 'Selected Skills' and 'Associated Bullet Points'.",
    "   e. 'My Skill Snapshot' Section: Add a button to save current state and a section to list/load saved snapshots.",
    "   f. 'Add Custom Experience' Form: Create a hidden or modal form with inputs for experience name, skills (comma-separated), and bullet points (textarea, newline-separated).",
    "   g. 'Export' Button: Add a button to trigger export.",
    "   h. 'Help/Onboarding' Section: Create a collapsible section with app usage instructions.",
    "4. Event Listeners & Core Logic (script.js):",
    "   a. Experience Selection Listener: Attach `change` event listeners to all experience selection checkboxes/cards. When an experience is selected/deselected, call an `updateSkillDisplay()` function.",
    "   b. `updateSkillDisplay()` Function: This is the core logic. It should:",
    "      i. Get all currently selected experience IDs.",
    "      ii. Aggregate all skills from these experiences, ensuring each skill (and its associated bullet points) is unique.",
    "      iii. Apply current search query and skill category filters.",
    "      iv. Sort skills (e.g., alphabetically, by category).",
    "      v. Clear the 'Selected Skills' and 'Associated Bullet Points' display areas.",
    "      vi. Dynamically create and append HTML elements for each skill, applying animated reveal styles. Each skill element should list its unique bullet points. Apply polish (animations, hover states).",
    "5. Search Functionality: Implement an `input` event listener on the search field. Filter the `experiencesData` based on the search term, re-render the experience selection area, and then call `updateSkillDisplay()`.",
    "6. Skill Categorization & Filtering: Implement `click` event listeners for filter buttons. Store selected filter categories in a state variable. Modify `updateSkillDisplay()` to only render skills matching the active filters.",
    "7. 'My Skill Snapshot' (localStorage):",
    "   a. Save Snapshot: On button click, get IDs of selected experiences, current search term, active filters. Store this state as a JSON string in `localStorage` with a unique key (e.g., timestamp). Display a confirmation toast.",
    "   b. Load Snapshots: On page load, retrieve all saved snapshots from `localStorage`. Dynamically create UI elements (e.g., buttons) to load each snapshot. Attach click listeners to these elements.",
    "   c. Restore State: When a snapshot is loaded, update experience selections, search field, and filters in the UI, then call `updateSkillDisplay()`.",
    "8. Custom Experience Submission (localStorage):",
    "   a. Form Input & Validation: On form submission, validate that experience name, skills, and bullets are not empty. Provide visual feedback for validation errors.",
    "   b. Data Transformation: Parse comma-separated skills and newline-separated bullets into structured JavaScript objects.",
    "   c. Store Locally: Save the new custom experience object as JSON in `localStorage` (e.g., in an array `customExperiences`).",
    "   d. Integrate & Update: Add the new custom experience to a temporary in-memory list that combines with `experiencesData`. Re-render the experience selection area and call `updateSkillDisplay()`. Display a success toast.",
    "9. Export Functionality: On 'Export' button click:",
    "   a. Generate Content: Construct a string containing the currently displayed skills and their bullet points, formatted for readability (e.g., Markdown or plain text).",
    "   b. Download: Create a `Blob` from the content string, then use `URL.createObjectURL` and a temporary `<a>` element to trigger a file download. Display a confirmation toast.",
    "10. Skill Definition Tooltips: Implement `mouseover` and `mouseleave` event listeners on dynamically generated skill elements. On `mouseover`, create and position a small, styled tooltip element containing the skill's `description` (from `experiencesData`). On `mouseleave`, hide/remove the tooltip.",
    "11. UI Polish - Animations & Transitions (CSS & JS):",
    "    a. Animated Reveal: Apply `opacity` and `transform` CSS transitions/animations to skill and bullet point elements as they are added to the DOM within `updateSkillDisplay()`.",
    "    b. Hover States: Define `:hover` styles in CSS for experience cards, skill tags, filter buttons, and action buttons for distinct visual feedback.",
    "    c. Themed Styling: Apply a consistent color palette, typography, spacing, and modern design principles throughout `style.css`.",
    "    d. Visual Feedback Toasts: Implement a simple JavaScript function to create and display animated toast messages for save, load, export, and custom experience actions. Use CSS keyframe animations for entry/exit effects.",
    "    e. Dynamic Layout: Use CSS Flexbox/Grid for flexible layout of main sections. Apply CSS transitions to container elements for smooth resizing if content changes significantly.",
    "12. Help/Onboarding Section: Implement JavaScript to toggle the visibility of the help section (e.g., using a slide-down/fade-in effect). Populate it with clear, concise instructions.",
    "13. Responsiveness: Implement CSS media queries in `style.css` to adjust layouts, font sizes, and component stacking for a range of desktop window widths, ensuring usability within a container (e.g., adjusting columns for experience selection and skill display).",
    "14. Final Review & Refinement: Test all features, check for visual glitches, ensure smooth transitions, and optimize code for readability and performance. Address any edge cases (e.g., no experiences selected, empty search results)."
  ],
  "dependencies": []
}